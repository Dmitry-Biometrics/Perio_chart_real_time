#!/usr/bin/env python3
"""
–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ú–ì–ù–û–í–ï–ù–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î
–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
"""

import asyncio
import time
import logging
from typing import Optional
import json

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
from instant_command_system import (
    InstantCommandProcessor,
    CommandCompleteness,
    integrate_instant_command_system
)

logger = logging.getLogger(__name__)

class EnhancedProcessorWithInstantCommands:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self, base_processor, web_clients_ref):
        self.base_processor = base_processor
        self.web_clients = web_clients_ref
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.instant_processor = InstantCommandProcessor(web_clients_ref)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.instant_stats = {
            'instant_commands_executed': 0,
            'partial_commands_detected': 0,
            'average_instant_response_time': 0.0,
            'total_instant_response_time': 0.0
        }
        
        logger.info("üöÄ Enhanced processor with instant commands initialized")
    
    def process_audio_chunk(self, client_id: str, audio_chunk) -> Optional[str]:
        """
        –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        """
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        transcription_result = self.base_processor.process_audio_chunk(client_id, audio_chunk)
        
        if transcription_result and isinstance(transcription_result, str) and transcription_result.strip():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            asyncio.create_task(self._check_instant_execution(client_id, transcription_result))
        
        return transcription_result
    
    async def _check_instant_execution(self, client_id: str, text: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        start_time = time.time()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
            completeness, command_data = self.instant_processor.analyzer.analyze_command_completeness(text, client_id)
            
            if completeness == CommandCompleteness.COMPLETE:
                # –ú–ì–ù–û–í–ï–ù–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï
                print(f"üöÄ INSTANT EXECUTION triggered for: '{text}'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await self.instant_processor._send_instant_result(client_id, command_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                response_time = time.time() - start_time
                self.instant_stats['instant_commands_executed'] += 1
                self.instant_stats['total_instant_response_time'] += response_time
                self.instant_stats['average_instant_response_time'] = (
                    self.instant_stats['total_instant_response_time'] / 
                    self.instant_stats['instant_commands_executed']
                )
                
                print(f"‚ö° Instant response time: {response_time*1000:.1f}ms")
                
                # –í–ê–ñ–ù–û: –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                await self._mark_command_as_processed(client_id, text)
                
                return True
                
            elif completeness == CommandCompleteness.INCOMPLETE:
                # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–ø–æ–ª–Ω–∞—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                print(f"‚è≥ PARTIAL COMMAND detected: '{text}'")
                await self.instant_processor._send_partial_feedback(client_id, text)
                self.instant_stats['partial_commands_detected'] += 1
                
                return False
        
        except Exception as e:
            logger.error(f"‚ùå Error in instant execution check: {e}")
            return False
        
        return False
    
    async def _mark_command_as_processed(self, client_id: str, text: str):
        """–ü–æ–º–µ—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if not hasattr(self, '_processed_commands'):
            self._processed_commands = {}
        
        command_key = f"{client_id}_{hash(text)}"
        self._processed_commands[command_key] = {
            'text': text,
            'timestamp': time.time(),
            'processed_instantly': True
        }
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
        current_time = time.time()
        expired_keys = [
            key for key, data in self._processed_commands.items()
            if current_time - data['timestamp'] > 600  # 10 –º–∏–Ω—É—Ç
        ]
        for key in expired_keys:
            del self._processed_commands[key]
    
    def is_command_already_processed(self, client_id: str, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"""
        if not hasattr(self, '_processed_commands'):
            return False
        
        command_key = f"{client_id}_{hash(text)}"
        return command_key in self._processed_commands
    
    async def process_with_enhanced_systems(self, client_id: str, text: str, confidence: float, 
                                          duration: float, recording_path: str = None, 
                                          speech_audio = None):
        """
        –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        if self.is_command_already_processed(client_id, text):
            print(f"‚ö° Command already processed instantly, skipping enhanced systems: '{text}'")
            return
        
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        print(f"üîÑ Processing through enhanced systems: '{text}'")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(self.base_processor, 'process_with_enhanced_systems'):
            await self.base_processor.process_with_enhanced_systems(
                client_id, text, confidence, duration, recording_path, speech_audio
            )
    
    def get_instant_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        stats = self.instant_stats.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        stats.update({
            'instant_system_enabled': True,
            'instant_response_threshold_ms': 100,  # –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
            'commands_in_cache': len(getattr(self, '_processed_commands', {})),
            'instant_hit_rate': (
                (stats['instant_commands_executed'] / 
                 max(1, stats['instant_commands_executed'] + stats['partial_commands_detected'])) * 100
            ) if stats['instant_commands_executed'] > 0 else 0
        })
        
        return stats

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ASR –∫–ª–∏–µ–Ω—Ç–æ–≤
async def handle_asr_client_with_instant_commands(websocket, enhanced_processor):
    """
    –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ASR –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    """
    client_addr = websocket.remote_address
    client_id = f"{client_addr[0]}_{client_addr[1]}_{int(time.time())}"
    
    logger.info(f"üé§ ASR –∫–ª–∏–µ–Ω—Ç —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: {client_id}")
    
    try:
        client_error_count = 0
        max_client_errors = 20
        last_ping_time = time.time()
        chunks_received = 0
        instant_commands_count = 0
        
        async for message in websocket:
            try:
                if isinstance(message, bytes):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                    try:
                        import numpy as np
                        audio_chunk = np.frombuffer(message, dtype=np.int16).astype(np.float32) / 32768.0
                        chunks_received += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                        if np.any(np.isnan(audio_chunk)) or np.any(np.isinf(audio_chunk)):
                            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç {client_id}")
                            client_error_count += 1
                            continue
                        
                        # –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–†–ï–ó –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –° –ú–ì–ù–û–í–ï–ù–ù–´–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò
                        if enhanced_processor:
                            result = enhanced_processor.process_audio_chunk(client_id, audio_chunk)
                            
                            if result is not None:
                                if result.strip():
                                    try:
                                        await asyncio.wait_for(websocket.send(result), timeout=2.0)
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                                        instant_stats = enhanced_processor.get_instant_stats()
                                        
                                        print(f"\n{'‚ö°' * 60}")
                                        print(f"   INSTANT COMMAND SYSTEM + FASTWHISPER")
                                        print(f"   üé§ TRANSCRIPTION: '{result.upper()}'")
                                        print(f"   üë§ Client: {client_addr[0]} | üìä Chunks: {chunks_received}")
                                        print(f"   ‚ö° Instant commands: {instant_stats['instant_commands_executed']}")
                                        print(f"   ‚è≥ Partial commands: {instant_stats['partial_commands_detected']}")
                                        print(f"   üéØ Instant hit rate: {instant_stats['instant_hit_rate']:.1f}%")
                                        print(f"   ‚è±Ô∏è Avg instant response: {instant_stats['average_instant_response_time']*1000:.1f}ms")
                                        print(f"   üöÄ Target response: <100ms")
                                        print('‚ö°' * 60 + "\n")
                                        
                                    except asyncio.TimeoutError:
                                        logger.warning(f"‚ö†Ô∏è Timeout sending result to {client_id}")
                                        client_error_count += 1
                                else:
                                    await websocket.send("NO_SPEECH")
                        else:
                            await websocket.send("SERVER_NOT_READY")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –æ—Ç {client_id}: {e}")
                        client_error_count += 1
                        
                elif isinstance(message, str):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
                    current_time = time.time()
                    
                    if message == "PING":
                        await websocket.send("PONG")
                        last_ping_time = current_time
                        
                    elif message == "STATS":
                        if enhanced_processor:
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            stats = enhanced_processor.base_processor.stats.copy()
                            instant_stats = enhanced_processor.get_instant_stats()
                            stats.update(instant_stats)
                            
                            stats['server_uptime'] = current_time - stats.get('server_uptime_start', current_time)
                            stats['instant_system_version'] = 'instant_commands_v1'
                            
                            try:
                                await asyncio.wait_for(websocket.send(json.dumps(stats)), timeout=3.0)
                            except asyncio.TimeoutError:
                                logger.warning(f"‚ö†Ô∏è Timeout sending stats to {client_id}")
                                
                    elif message == "INSTANT_STATS":
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        if enhanced_processor:
                            instant_stats = enhanced_processor.get_instant_stats()
                            try:
                                await asyncio.wait_for(websocket.send(json.dumps(instant_stats)), timeout=3.0)
                            except asyncio.TimeoutError:
                                logger.warning(f"‚ö†Ô∏è Timeout sending instant stats to {client_id}")
                                
                    elif message == "MODEL_INFO":
                        if enhanced_processor:
                            model_info = enhanced_processor.base_processor.asr.get_info()
                            model_info.update({
                                'instant_commands_enabled': True,
                                'instant_response_target_ms': 100,
                                'instant_command_patterns': 7,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                                'enhanced_mode': 'INSTANT_COMMANDS_V1',
                                'command_prediction': True,
                                'real_time_execution': True
                            })
                            
                            try:
                                await asyncio.wait_for(websocket.send(json.dumps(model_info)), timeout=3.0)
                            except asyncio.TimeoutError:
                                logger.warning(f"‚ö†Ô∏è Timeout sending model info to {client_id}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
                if client_error_count > max_client_errors:
                    logger.error(f"‚ùå Too many errors from {client_id}, disconnecting")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Critical error handling message from {client_id}: {e}")
                client_error_count += 1
                
    except Exception as e:
        logger.error(f"‚ùå ASR client error: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        if enhanced_processor and hasattr(enhanced_processor.base_processor, 'segmentation_processor'):
            enhanced_processor.base_processor.segmentation_processor.cleanup_client(client_id)
            logger.debug(f"üóëÔ∏è Cleaned up buffers for {client_id}")

def create_enhanced_processor_with_instant_commands(base_processor, web_clients_ref):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    
    enhanced_processor = EnhancedProcessorWithInstantCommands(base_processor, web_clients_ref)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ enhanced —Å–∏—Å—Ç–µ–º
    if hasattr(base_processor, 'process_with_enhanced_systems'):
        base_processor.process_with_enhanced_systems = enhanced_processor.process_with_enhanced_systems
    
    logger.info("üöÄ Enhanced processor with instant commands created")
    return enhanced_processor

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
async def integrate_instant_commands_into_server(original_main_function):
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
    """
    
    print("\n" + "‚ö°" * 80)
    print("   üöÄ INSTANT COMMAND SYSTEM INTEGRATION")
    print("   ‚ö° –ú–ì–ù–û–í–ï–ù–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –ö–û–ú–ê–ù–î")
    print("   ‚Ä¢ –ü–†–ï–î–ò–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù–ù–û–°–¢–ò –ö–û–ú–ê–ù–î")
    print("   ‚Ä¢ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (<100ms)")
    print("   ‚Ä¢ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò")
    print("   ‚Ä¢ –ü–û–î–î–ï–†–ñ–ö–ê 7 –¢–ò–ü–û–í –ö–û–ú–ê–ù–î")
    print("   ‚Ä¢ REAL-TIME –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨")
    print("‚ö°" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
    await original_main_function()

if __name__ == "__main__":
    print("üöÄ INSTANT COMMAND SYSTEM - Integration Module")
    print("=" * 60)
    print("üìã –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–ì–ù–û–í–ï–ù–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print()
    print("1. ü¶∑ PROBING DEPTH:")
    print("   'probing depth on tooth number 14 buccal surface 3 2 4'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞")
    print()
    print("2. üîÑ MOBILITY:")
    print("   'tooth 8 has mobility grade 2'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–∏ grade + —á–∏—Å–ª–æ")
    print()
    print("3. ü©∏ BLEEDING ON PROBING:")
    print("   'bleeding on probing tooth 12 buccal distal'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")
    print()
    print("4. üíß SUPPURATION:")
    print("   'suppuration present on tooth 8 lingual mesial'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏")
    print()
    print("5. üî± FURCATION:")
    print("   'furcation class 2 on tooth 6'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ")
    print()
    print("6. üìê GINGIVAL MARGIN:")
    print("   'gingival margin on tooth 14 minus 1 0 plus 1'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ 3 –∑–Ω–∞—á–µ–Ω–∏—è—Ö")
    print()
    print("7. ‚ùå MISSING TEETH:")
    print("   'missing teeth 1 16 17 32'")
    print("   ‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ —Å–ø–∏—Å–∫–µ –Ω–æ–º–µ—Ä–æ–≤")
    print()
    print("üéØ –¶–ï–õ–ï–í–û–ï –í–†–ï–ú–Ø –û–¢–ö–õ–ò–ö–ê: <100ms")
    print("üìä –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    print("‚è≥ –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨: –î–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    print("=" * 60)