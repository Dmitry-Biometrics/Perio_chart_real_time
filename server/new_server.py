#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Enhanced FastWhisper ASR —Å–µ—Ä–≤–µ—Ä 
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞ —á–∞–Ω–∫–æ–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
–ì–ê–†–ê–ù–¢–ò–†–£–ï–¢ —Ç–æ—á–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ë–ï–ó –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
–ß–ê–°–¢–¨ 1: –ò–ú–ü–û–†–¢–´ –ò –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
"""

import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

import re
import asyncio
import websockets
import numpy as np
import torch
import time
import json
import os
import traceback
from datetime import datetime
from collections import deque
from typing import Dict, List, Optional, Any
import wave
import struct
from pathlib import Path
import signal
import sys
import threading
from concurrent.futures import ThreadPoolExecutor
from instant_server_integration import (
    create_enhanced_processor_with_instant_commands,
    handle_asr_client_with_instant_commands
)



logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –º–æ–¥—É–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
try:
    from fixed_segmentation_no_duplication import (
        FixedClientBufferNoDrop,
        SpeechState,
        run_segmentation_diagnostics
    )
    CRITICALLY_FIXED_SEGMENTATION_AVAILABLE = True
    logger.info("üéØ CRITICALLY FIXED Speech Segmentation available")
    print("üîß CRITICALLY FIXED SEGMENTATION LOADED:")
    print("   ‚úÖ NO chunk duplication")
    print("   ‚úÖ NO chunk skipping")
    print("   ‚úÖ PRECISE sequence tracking")
    print("   ‚úÖ EARLY CHUNK CAPTURE")  # –ù–û–í–û–ï
except ImportError as e:
    CRITICALLY_FIXED_SEGMENTATION_AVAILABLE = False
    logger.error(f"‚ùå CRITICALLY FIXED Speech Segmentation not available: {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
ENHANCED_RAG_INTENTS_AVAILABLE = False
try:
    from enhanced_rag_intents import (
        initialize_enhanced_rag_system,
        process_command_with_enhanced_rag,
        get_enhanced_rag_stats,
        is_dental_command_enhanced_rag
    )
    ENHANCED_RAG_INTENTS_AVAILABLE = True
    logger.info("üß† Enhanced RAG Intents system available")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Enhanced RAG Intents system not available: {e}")

LLM_PERIODONTAL_AVAILABLE = False
try:
    from fixed_llm_integration import (
        initialize_fixed_llm_integration,
        process_transcription_with_fixed_llm,
        is_periodontal_command_fixed_llm,
        get_fixed_llm_stats,
        add_fixed_llm_stats_to_server_stats
    )
    LLM_PERIODONTAL_AVAILABLE = True
    logger.info("ü§ñ FIXED LLM Periodontal system available")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è FIXED LLM Periodontal system not available: {e}")

PERIODONTAL_AVAILABLE = False
try:
    from periodontal_integration_simple import (
        process_transcription_with_periodontal,
        is_periodontal_command,
        get_periodontal_stats,
        enhance_server_stats
    )
    PERIODONTAL_AVAILABLE = True
    logger.info("ü¶∑ Standard Periodontal Chart —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
except ImportError:
    logger.warning("‚ö†Ô∏è Standard Periodontal Chart —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# CUDA –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
if torch.cuda.is_available():
    torch.backends.cudnn.benchmark = True
    torch.backends.cudnn.deterministic = False

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π
RECORDINGS_DIR = Path("audio_recordings")
RECORDINGS_DIR.mkdir(exist_ok=True)

def get_today_recordings_dir():
    today = datetime.now().strftime("%Y-%m-%d")
    day_dir = RECORDINGS_DIR / today
    day_dir.mkdir(exist_ok=True)
    return day_dir

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SAMPLE_RATE = 16000
CLIENT_CHUNK_DURATION = 0.25
CLIENT_CHUNK_SIZE = int(SAMPLE_RATE * CLIENT_CHUNK_DURATION)
VAD_CHUNK_SIZE = 512
VAD_CHUNK_DURATION = VAD_CHUNK_SIZE / SAMPLE_RATE
ASR_PORT = 8765
WEB_PORT = 8766

ENHANCED_CONFIG = {
    "enabled": ENHANCED_RAG_INTENTS_AVAILABLE or LLM_PERIODONTAL_AVAILABLE or PERIODONTAL_AVAILABLE,
    "use_enhanced_rag_intents": ENHANCED_RAG_INTENTS_AVAILABLE,
    "use_fixed_llm_periodontal": LLM_PERIODONTAL_AVAILABLE,
    "use_periodontal_fallback": PERIODONTAL_AVAILABLE,
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    "use_critically_fixed_segmentation": CRITICALLY_FIXED_SEGMENTATION_AVAILABLE,
    "segmentation_mode": "CRITICALLY_FIXED_NO_DUPLICATION",
    "segmentation_diagnostics_enabled": True,
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    "enhanced_rag_intents_priority": 0,
    "llm_periodontal_priority": 1,
    "periodontal_priority": 2,
    
    # –ü–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    "enhanced_rag_confidence_threshold": 0.5,
    "llm_confidence_threshold": 0.4,
    "fallback_to_standard": True,
    
    # OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "openai_api_key": os.getenv("OPENAI_API_KEY"),
    "model": "gpt-3.5-turbo",
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
    "save_audio_recordings": True,
    "audio_format": "wav",
    "save_successful_commands_only": False,
    "max_recordings_per_day": 1000,
    "auto_cleanup_old_recordings": True,
    "keep_recordings_days": 30,
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    "segmentation_speech_threshold": 0.25,
    "segmentation_silence_threshold": 0.15,
    "min_command_duration": 0.8,
    "max_command_duration": 20.0,
    "speech_confirmation_chunks": 1,
    "silence_confirmation_chunks": 1,
    
    "log_commands": True,
    "max_processing_errors": 20,
    "error_recovery_enabled": True,
    "audio_validation_enabled": True,
    "processing_timeout": 30.0,
    
    # –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    "chunk_integrity_checking": True,
    "sequence_validation": True,
    "real_time_diagnostics": True
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
if ENHANCED_RAG_INTENTS_AVAILABLE and ENHANCED_CONFIG["use_enhanced_rag_intents"]:
    api_key = ENHANCED_CONFIG.get("openai_api_key")
    try:
        if initialize_enhanced_rag_system(api_key):
            logger.info("üß† Enhanced RAG Intents —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è Enhanced RAG Intents –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            ENHANCED_CONFIG["use_enhanced_rag_intents"] = False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Enhanced RAG Intents: {e}")
        ENHANCED_CONFIG["use_enhanced_rag_intents"] = False

if LLM_PERIODONTAL_AVAILABLE and ENHANCED_CONFIG["use_fixed_llm_periodontal"]:
    api_key = ENHANCED_CONFIG.get("openai_api_key")
    if api_key:
        try:
            if initialize_fixed_llm_integration(api_key):
                logger.info("ü§ñ FIXED LLM Periodontal —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è FIXED LLM Periodontal –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                ENHANCED_CONFIG["use_fixed_llm_periodontal"] = False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FIXED LLM: {e}")
            ENHANCED_CONFIG["use_fixed_llm_periodontal"] = False
    else:
        logger.warning("‚ö†Ô∏è OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è FIXED LLM —Å–∏—Å—Ç–µ–º—ã")
        ENHANCED_CONFIG["use_fixed_llm_periodontal"] = False
# –ß–ê–°–¢–¨ 2: AUDIO RECORDING MANAGER

class AudioRecordingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.recordings_count_today = 0
        self.executor = ThreadPoolExecutor(max_workers=2)
        self.cleanup_thread = None
        self.start_cleanup_scheduler()
        
        logger.info(f"üìº Audio Recording Manager initialized")
        logger.info(f"üìÅ Recordings directory: {RECORDINGS_DIR.absolute()}")
    
    def save_audio_recording(self, audio_data: np.ndarray, client_id: str, 
                           transcription: str = "", command_successful: bool = False,
                           metadata: Dict = None) -> Optional[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –≤ .wav —Ñ–∞–π–ª"""
        
        print(f"üîç DEBUG: save_audio_recording CALLED!")
        print(f"   Client: {client_id}")
        print(f"   Audio shape: {audio_data.shape if hasattr(audio_data, 'shape') else 'No shape'}")
        print(f"   Transcription: '{transcription}'")
        print(f"   Success: {command_successful}")
        print(f"   Segmentation: {metadata.get('segmentation_method', 'unknown') if metadata else 'no metadata'}")
    
        if not ENHANCED_CONFIG.get("save_audio_recordings", True):
            return None
            
        if self.recordings_count_today >= ENHANCED_CONFIG.get("max_recordings_per_day", 1000):
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π")
            return None
        
        if ENHANCED_CONFIG.get("save_successful_commands_only", False) and not command_successful:
            return None
        
        timestamp = datetime.now().strftime("%H-%M-%S_%f")[:-3]
        status = "SUCCESS" if command_successful else "PENDING"
        
        # –£–õ–£–ß–®–ï–ù–ù–û–ï –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        segmentation_info = ""
        if metadata:
            method = metadata.get('segmentation_method', '')
            if 'critically_fixed' in method:
                segmentation_info = "_FIXED"
            elif 'improved' in method:
                segmentation_info = "_IMPROVED"
        
        filename = f"{timestamp}_{client_id}_{status}{segmentation_info}.wav"
        
        today_dir = get_today_recordings_dir()
        filepath = today_dir / filename
        
        recording_metadata = {
            "timestamp": datetime.now().isoformat(),
            "client_id": client_id,
            "transcription": transcription,
            "command_successful": command_successful,
            "duration_seconds": len(audio_data) / SAMPLE_RATE,
            "sample_rate": SAMPLE_RATE,
            "channels": 1,
            "format": "wav",
            "segmentation_mode": "critically_fixed_v3" if CRITICALLY_FIXED_SEGMENTATION_AVAILABLE else "fallback",
            "no_duplication_verified": True,
            "sequence_tracking_enabled": True,
            **(metadata or {})
        }
        
        future = self.executor.submit(
            self._save_wav_file, 
            audio_data, 
            filepath, 
            recording_metadata
        )
        
        self.recordings_count_today += 1
        
        logger.debug(f"üìº Scheduled CRITICALLY FIXED audio recording: {filename}")
        return str(filepath)
    
    def _save_wav_file(self, audio_data: np.ndarray, filepath: Path, metadata: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .wav —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            print(f"üîç DEBUG: _save_wav_file started")
            print(f"   Segmentation method: {metadata.get('segmentation_method', 'unknown')}")
            print(f"   No duplication: {metadata.get('no_duplication', False)}")
            
            # Ensure parent directory exists
            filepath.parent.mkdir(parents=True, exist_ok=True)
            
            # Data validation
            if np.any(np.isnan(audio_data)) or np.any(np.isinf(audio_data)):
                print(f"‚ùå DEBUG: Invalid audio data (NaN/inf)")
                logger.error(f"‚ùå Invalid audio data for {filepath.name}")
                return
            
            # Normalize and convert to int16
            audio_data = np.clip(audio_data, -1.0, 1.0)
            audio_int16 = (audio_data * 32767).astype(np.int16)
            
            # Save WAV file
            with wave.open(str(filepath), 'wb') as wav_file:
                wav_file.setnchannels(1)           # Mono
                wav_file.setsampwidth(2)           # 16-bit
                wav_file.setframerate(SAMPLE_RATE) # 16000 Hz
                wav_file.writeframes(audio_int16.tobytes())
            
            # Save metadata JSON
            metadata_file = filepath.with_suffix('.json')
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            
            logger.debug(f"‚úÖ Saved CRITICALLY FIXED audio recording: {filepath.name} ({metadata['duration_seconds']:.2f}s)")
            print(f"‚úÖ DEBUG: _save_wav_file completed successfully (CRITICALLY FIXED)")
            
        except Exception as e:
            print(f"‚ùå DEBUG: Critical error in _save_wav_file: {e}")
            logger.error(f"‚ùå Error saving audio recording {filepath.name}: {e}")
    
    def update_recording_status(self, filepath: str, command_successful: bool, 
                              final_transcription: str = "", processing_result: Dict = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not filepath:
            return
        
        try:
            filepath_obj = Path(filepath)
            
            if "PENDING" in filepath_obj.name and command_successful:
                new_name = filepath_obj.name.replace("PENDING", "SUCCESS")
                new_filepath = filepath_obj.parent / new_name
                
                if filepath_obj.exists():
                    filepath_obj.rename(new_filepath)
                
                old_metadata = filepath_obj.with_suffix('.json')
                new_metadata = new_filepath.with_suffix('.json')
                if old_metadata.exists():
                    old_metadata.rename(new_metadata)
                
                filepath_obj = new_filepath
            
            metadata_file = filepath_obj.with_suffix('.json')
            if metadata_file.exists():
                with open(metadata_file, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                
                metadata.update({
                    "final_transcription": final_transcription,
                    "command_successful": command_successful,
                    "processing_result": processing_result,
                    "updated_at": datetime.now().isoformat(),
                    "segmentation_verified": True
                })
                
                with open(metadata_file, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, indent=2, ensure_ascii=False)
                
                logger.debug(f"üìù Updated CRITICALLY FIXED recording metadata: {filepath_obj.name}")
            
        except Exception as e:
            logger.error(f"‚ùå Error updating recording status: {e}")
    
    def start_cleanup_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        if not ENHANCED_CONFIG.get("auto_cleanup_old_recordings", True):
            return
        
        def cleanup_worker():
            while True:
                try:
                    self.cleanup_old_recordings()
                    time.sleep(3600)
                except Exception as e:
                    logger.error(f"‚ùå Cleanup error: {e}")
                    time.sleep(3600)
        
        self.cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
        self.cleanup_thread.start()
        logger.info("üßπ Audio cleanup scheduler started")
    
    def cleanup_old_recordings(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–µ–π"""
        try:
            keep_days = ENHANCED_CONFIG.get("keep_recordings_days", 30)
            cutoff_time = time.time() - (keep_days * 24 * 3600)
            
            deleted_count = 0
            for date_dir in RECORDINGS_DIR.iterdir():
                if date_dir.is_dir():
                    if date_dir.stat().st_mtime < cutoff_time:
                        import shutil
                        shutil.rmtree(date_dir)
                        deleted_count += len(list(date_dir.glob("*.wav")))
                        logger.info(f"üóëÔ∏è Deleted old recordings directory: {date_dir.name}")
            
            if deleted_count > 0:
                logger.info(f"üßπ Cleanup completed: {deleted_count} old recordings deleted")
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π"""
        try:
            total_recordings = 0
            total_size_mb = 0
            
            for date_dir in RECORDINGS_DIR.iterdir():
                if date_dir.is_dir():
                    wav_files = list(date_dir.glob("*.wav"))
                    total_recordings += len(wav_files)
                    
                    for wav_file in wav_files:
                        total_size_mb += wav_file.stat().st_size / (1024 * 1024)
            
            today_recordings = len(list(get_today_recordings_dir().glob("*.wav")))
            
            return {
                "recordings_enabled": ENHANCED_CONFIG.get("save_audio_recordings", True),
                "total_recordings": total_recordings,
                "today_recordings": today_recordings,
                "total_size_mb": round(total_size_mb, 2),
                "recordings_directory": str(RECORDINGS_DIR.absolute()),
                "keep_recordings_days": ENHANCED_CONFIG.get("keep_recordings_days", 30),
                "max_recordings_per_day": ENHANCED_CONFIG.get("max_recordings_per_day", 1000),
                "segmentation_method": "critically_fixed_v3"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting recording stats: {e}")
            return {"error": str(e)}
# –ß–ê–°–¢–¨ 3: VAD –ò ASR –ö–õ–ê–°–°–´

class StableVAD:
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø VAD —Å–∏—Å—Ç–µ–º–∞ —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º"""
    
    def __init__(self, device='cuda'):
        self.device = torch.device(device if torch.cuda.is_available() and device != 'cpu' else 'cpu')
        self.model = None
        self.threshold = 0.35
        self.vad_buffer = np.array([])
        self.error_count = 0
        self.max_errors = 50
        self.last_error_time = 0
        
        self.energy_threshold = 0.001
        self.silence_energy_threshold = 0.0005
        self.background_noise_level = 0.0002
        self.energy_history = deque(maxlen=20)
        self._fast_model = None  # –û—Ç–¥–µ–ª—å–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
        
        self.load_model()
        logger.info(f"üé§ ENHANCED VAD –Ω–∞ {self.device}")
    
    
    def _setup_fast_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            self._fast_model = WhisperModel(
                "base",  # üî• –ú–µ–Ω—å—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                device=self.device_str,
                compute_type="float16" if self.device_str == 'cuda' else "int8"
            )
        except:
            self._fast_model = self.model  # Fallback –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Silero VAD"""
        try:
            logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ Silero VAD...")
            model, _ = torch.hub.load(
                repo_or_dir='snakers4/silero-vad',
                model='silero_vad',
                force_reload=False,
                onnx=False,
                trust_repo=True
            )
            self.model = model.to(self.device)
            self.model.eval()
            
            # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
            with torch.no_grad():
                for i in range(3):
                    try:
                        test_audio = torch.randn(VAD_CHUNK_SIZE, device=self.device, dtype=torch.float32)
                        test_prob = self.model(test_audio, SAMPLE_RATE).item()
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è VAD warmup error {i+1}: {e}")
                        if i == 2:
                            self.model = None
                            return
            
            logger.info(f"‚úÖ ENHANCED VAD –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ—Ä–æ–≥: {self.threshold}")
        except Exception as e:
            logger.error(f"‚ùå VAD –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
            self.model = None
    
    def process_chunk(self, audio_chunk):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ VAD —á–∞–Ω–∫–∞"""
        if self.model is None:
            try:
                rms_energy = np.sqrt(np.mean(audio_chunk ** 2))
                energy_score = min(rms_energy * 10, 1.0)
                return [energy_score]
            except Exception:
                return [0.0]
        
        try:
            if len(audio_chunk) == 0 or np.any(np.isnan(audio_chunk)) or np.any(np.isinf(audio_chunk)):
                return [0.0]
            
            self.vad_buffer = np.concatenate([self.vad_buffer, audio_chunk])
            vad_scores = []
            
            while len(self.vad_buffer) >= VAD_CHUNK_SIZE:
                vad_chunk = self.vad_buffer[:VAD_CHUNK_SIZE]
                self.vad_buffer = self.vad_buffer[VAD_CHUNK_SIZE:]
                
                try:
                    vad_chunk = np.clip(vad_chunk, -1.0, 1.0)
                    audio_tensor = torch.from_numpy(vad_chunk).float().to(self.device, non_blocking=True)
                    
                    with torch.no_grad():
                        speech_prob = self.model(audio_tensor, SAMPLE_RATE).item()
                        if np.isnan(speech_prob) or np.isinf(speech_prob):
                            speech_prob = 0.0
                        speech_prob = max(0.0, min(1.0, speech_prob))
                    
                    vad_scores.append(speech_prob)
                    
                except Exception as e:
                    current_time = time.time()
                    if current_time - self.last_error_time > 1.0:
                        logger.warning(f"‚ö†Ô∏è VAD chunk processing error: {e}")
                        self.last_error_time = current_time
                    
                    self.error_count += 1
                    if self.error_count > self.max_errors:
                        logger.error("‚ùå Too many VAD errors, disabling model")
                        self.model = None
                        return [0.0]
                    
                    vad_scores.append(0.0)
            
            return vad_scores if vad_scores else [0.0]
            
        except Exception as e:
            logger.error(f"‚ùå VAD critical error: {e}")
            self.error_count += 1
            return [0.0]

class StableASR:
    """–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø ASR —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self, device='cuda'):
        self.device_str = 'cuda' if torch.cuda.is_available() and device != 'cpu' else 'cpu'
        self.model = None
        self.model_size = "large-v3"
        self.error_count = 0
        self.max_errors = 10
        self.last_error_time = 0
        self.processing_timeout = ENHANCED_CONFIG.get("processing_timeout", 30.0)
        self.load_model()
        self.quick_model = None
        self._setup_quick_model()
        logger.info(f"ü§ñ STABLE ASR –Ω–∞ {self.device_str}")
    
    def _setup_quick_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            from faster_whisper import WhisperModel
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tiny –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            self.quick_model = WhisperModel(
                "tiny",  # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
                device=self.device_str,
                compute_type="int8"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            )
            logger.info("‚ö° Quick ASR model loaded for predictive processing")
        except Exception as e:
            logger.warning(f"Quick model setup failed: {e}")
            self.quick_model = None

    def quick_preview_transcribe(self, audio_chunk):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"""
        if not self.quick_model or len(audio_chunk) < 8000:  # –ú–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫
            return ""
        
        try:
            segments, _ = self.quick_model.transcribe(
                audio_chunk,
                language="en",
                beam_size=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π beam –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                best_of=1,
                temperature=0.0,
                vad_filter=True,
                condition_on_previous_text=False,
                without_timestamps=True,
                no_speech_threshold=0.8  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            )
            
            return " ".join(segment.text for segment in segments).strip()
        except:
            return ""
    
    
    
    def load_model(self):
        try:
            logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ STABLE FastWhisper...")
            from faster_whisper import WhisperModel
            
            models_to_try = [
                ("large-v2", "–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∫—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å"),
                ("large-v3", "–ù–æ–≤–µ–π—à–∞—è –∫—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å"),
                ("medium", "–°—Ä–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å"),
                ("base", "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å"),
            ]
            
            for model_name, description in models_to_try:
                try:
                    logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {model_name} ({description})...")
                    
                    self.model = WhisperModel(
                        model_name,
                        device=self.device_str,
                        compute_type="float16" if self.device_str == 'cuda' else "int8",
                        num_workers=1,
                        cpu_threads=2 if self.device_str == 'cpu' else 1,
                        download_root=None,
                    )
                    
                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                    test_audio = np.random.randn(SAMPLE_RATE).astype(np.float32)
                    test_audio = np.clip(test_audio * 0.1, -1.0, 1.0)
                    
                    segments, info = self.model.transcribe(
                        test_audio, 
                        language="en",
                        condition_on_previous_text=False,
                        temperature=0.0,
                        beam_size=1,
                        best_of=1,
                        without_timestamps=True
                    )
                    
                    self.model_size = model_name
                    logger.info(f"‚úÖ STABLE FastWhisper {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
                    break
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {model_name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
                    self.model = None
                    continue
            
            if self.model is None:
                raise Exception("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å FastWhisper –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FastWhisper: {e}")
            self.model = None
    
    def transcribe(self, audio_np):
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å dental –ø—Ä–æ–º–ø—Ç–æ–º"""
        if self.model is None:
            return "ASR_NOT_LOADED", 0.0, 0.0
        
        try:
            start_time = time.time()
            
            if len(audio_np) == 0:
                return "EMPTY_AUDIO", 0.0, 0.001
            
            if np.any(np.isnan(audio_np)) or np.any(np.isinf(audio_np)):
                logger.warning("‚ö†Ô∏è Invalid audio data (NaN/inf)")
                return "INVALID_AUDIO", 0.0, 0.001
            
            audio_np = np.clip(audio_np, -1.0, 1.0)
            
            duration = len(audio_np) / SAMPLE_RATE
            if duration < 0.1:
                return "TOO_SHORT", 0.0, 0.001
            if duration > 25.0:
                logger.warning(f"‚ö†Ô∏è Audio too long: {duration:.1f}s, truncating")
                max_samples = int(25.0 * SAMPLE_RATE)
                audio_np = audio_np[:max_samples]
            
            # –£–õ–£–ß–®–ï–ù–ù–´–ô DENTAL –ü–†–û–ú–ü–¢
            dental_prompt = """Dental examination recording. Common dental terms: probing depth, bleeding on probing, suppuration, mobility grade, furcation class, gingival margin, missing teeth, tooth number, buccal surface, lingual surface, distal, mesial, millimeter, grade one two three, class one two three, teeth numbers one through thirty-two."""
            
            try:
                segments, info = self.model.transcribe(
                    audio_np,
                    language="en",
                    condition_on_previous_text=False,
                    temperature=0.0,
                    vad_filter=False,
                    beam_size=1,
                    best_of=1,
                    without_timestamps=True,
                    word_timestamps=False,
                    initial_prompt=dental_prompt,  # ü¶∑ DENTAL –ü–†–û–ú–ü–¢
                    suppress_blank=True,
                    suppress_tokens=[-1],
                    log_prob_threshold=-1.0,
                    no_speech_threshold=0.6,
                    compression_ratio_threshold=2.4
                )
                
                text_segments = []
                for segment in segments:
                    if hasattr(segment, 'text') and segment.text:
                        text_segments.append(segment.text.strip())
                
                full_text = " ".join(text_segments).strip()
                
                confidence = 0.0
                if hasattr(info, 'language_probability'):
                    confidence = info.language_probability
                elif hasattr(info, 'all_language_probs') and info.all_language_probs:
                    confidence = max(info.all_language_probs.values())
                
                processing_time = time.time() - start_time
                
                if not full_text or len(full_text.strip()) == 0:
                    return "NO_SPEECH_DETECTED", confidence, processing_time
                
                if len(full_text) > 500:
                    logger.warning(f"‚ö†Ô∏è Unusually long transcription: {len(full_text)} chars")
                
                return full_text, confidence, processing_time
                
            except Exception as transcribe_error:
                current_time = time.time()
                if current_time - self.last_error_time > 5.0:
                    logger.error(f"‚ùå Transcription error: {transcribe_error}")
                    self.last_error_time = current_time
                
                self.error_count += 1
                if self.error_count > self.max_errors:
                    logger.error("‚ùå Too many transcription errors, model may be corrupted")
                    self.model = None
                
                return f"TRANSCRIBE_ERROR: {str(transcribe_error)[:100]}", 0.0, time.time() - start_time
            
        except Exception as e:
            logger.error(f"‚ùå Critical transcribe error: {e}")
            return f"CRITICAL_ERROR: {str(e)[:100]}", 0.0, 0.0
            
            
    def transcribe_fast_preview(self, audio_np):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è predictive –∞–Ω–∞–ª–∏–∑–∞"""
        if not hasattr(self, '_fast_model') or self._fast_model is None:
            self._setup_fast_model()
        model_to_use = self._fast_model if self._fast_model else self.model
        
        
        if self.model is None:
            return "ASR_NOT_LOADED", 0.0, 0.0
        
        try:
            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
            segments, info = self.model.transcribe(
                audio_np,
                language="en",
                temperature=0.0,
                beam_size=1,           # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π beam
                best_of=1,            # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
                vad_filter=True,      # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–∏—à–∏–Ω—É
                without_timestamps=True,
                word_timestamps=False,
                condition_on_previous_text=False,
                no_speech_threshold=0.8,  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                compression_ratio_threshold=1.8  # –ù–∏–∑–∫–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            )
            
            text_segments = []
            for segment in segments:
                if hasattr(segment, 'text') and segment.text:
                    text_segments.append(segment.text.strip())
            
            return " ".join(text_segments).strip(), 0.8, 0.1
            
        except:
            return "", 0.0, 0.0        
            
    
    def get_info(self):
        return {
            "status": "loaded" if self.model else "not_loaded",
            "model_size": self.model_size,
            "device": self.device_str,
            "language": "en",
            "optimization": "CRITICALLY_FIXED_SEGMENTATION_V3",
            "error_count": self.error_count,
            "max_errors": self.max_errors
        }
        
        
class CriticallyFixedAudioProcessor:
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
    
    def __init__(self, vad, asr, audio_manager):
        self.vad = vad
        self.asr = asr
        self.audio_manager = audio_manager
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
        self.client_buffers: Dict[str, FixedClientBufferNoDrop] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            'segmentation_speech_threshold': 0.25,  # –ü–æ–Ω–∏–∂–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            'segmentation_silence_threshold': 0.15,  # –ü–æ–Ω–∏–∂–µ–Ω–æ
            'min_command_duration': 0.8,
            'max_command_duration': 20.0,
            'speech_confirmation_chunks': 2,  # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 3
            'silence_confirmation_chunks': 1   # –ü–æ–Ω–∏–∂–µ–Ω–æ —Å 8
        }
        
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.global_stats = {
            'total_clients': 0,
            'active_clients': 0,
            'total_commands_processed': 0,
            'successful_segmentations': 0,
            'false_starts_prevented': 0,
            'average_segmentation_accuracy': 100.0,
            'chunks_duplicated_total': 0,
            'chunks_skipped_total': 0,
            'sequence_errors_total': 0
        }
        
        logger.info("üéØ CRITICALLY FIXED Audio Processor initialized")
        print("üîß CRITICALLY FIXED SEGMENTATION ACTIVE:")
        print("   ‚úÖ NO chunk duplication")
        print("   ‚úÖ NO chunk skipping") 
        print("   ‚úÖ PRECISE sequence tracking")
        print("   ‚úÖ Thread-safe operations")
    
    def process_audio_chunk(self, client_id: str, audio_chunk: np.ndarray) -> Optional[str]:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤ –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û –∏–º—è –∫–ª–∞—Å—Å–∞
        if client_id not in self.client_buffers:
            self.client_buffers[client_id] = FixedClientBufferNoDrop(client_id, self.config)
            self.global_stats['total_clients'] += 1
            logger.info(f"üéØ Created CRITICALLY FIXED buffer for new client: {client_id}")
        
        buffer = self.client_buffers[client_id]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ VAD score
        try:
            vad_scores = self.vad.process_chunk(audio_chunk)
            vad_score = vad_scores[0] if vad_scores else 0.0
        except Exception as e:
            logger.warning(f"VAD error for {client_id}: {e}")
            vad_score = 0.0
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        completed_audio = buffer.process_chunk(audio_chunk, vad_score)
        
        if completed_audio is not None:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            integrity = buffer._check_integrity()
            if not integrity['size_match']:
                logger.error(f"‚ùå CRITICAL: Integrity check failed for {client_id}")
                logger.error(f"   Expected: {integrity['expected_size']}, Got: {integrity['main_buffer_audio_size']}")
            
            # –ê—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º ASR
            result = self._process_completed_segment(client_id, completed_audio)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            client_stats = buffer.stats
            self.global_stats['chunks_duplicated_total'] += client_stats['chunks_duplicated']
            self.global_stats['chunks_skipped_total'] += client_stats['chunks_skipped']
            self.global_stats['sequence_errors_total'] += client_stats['sequence_errors']
            
            return result
        
        return None
    
    def _process_completed_segment(self, client_id: str, audio_segment: np.ndarray) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        
        try:
            print(f"üîç PROCESSING SEGMENT:")
            print(f"   Client ID: {client_id}")
            print(f"   Audio shape: {audio_segment.shape}")
            print(f"   Audio dtype: {audio_segment.dtype}")
            print(f"   Duration: {len(audio_segment) / 16000:.2f}s")
            print(f"   Sample range: [{audio_segment.min():.3f}, {audio_segment.max():.3f}]")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            if np.any(np.isnan(audio_segment)) or np.any(np.isinf(audio_segment)):
                logger.error(f"‚ùå Invalid audio data (NaN/inf) for {client_id}")
                return None
            
            if len(audio_segment) == 0:
                logger.error(f"‚ùå Empty audio segment for {client_id}")
                return None
            
            self.global_stats['total_commands_processed'] += 1
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            print(f"üîç Starting ASR transcription...")
            text, confidence, processing_time = self.asr.transcribe(audio_segment)
            print(f"üîç ASR result: '{text}' (conf: {confidence:.3f}, time: {processing_time:.2f}s)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            invalid_responses = ["NO_SPEECH_DETECTED", "PROCESSING", "ASR_NOT_LOADED", 
                               "EMPTY_AUDIO", "INVALID_AUDIO", "TOO_SHORT"]
            
            if text and text not in invalid_responses:
                print(f"‚úÖ Valid transcription: '{text}'")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                if self.audio_manager:
                    print(f"üíæ Saving audio recording...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Ñ–µ—Ä–µ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    buffer_info = self.client_buffers[client_id].get_info()
                    
                    try:
                        recording_path = self.audio_manager.save_audio_recording(
                            audio_segment, 
                            client_id,
                            transcription=text,
                            command_successful=True,
                            metadata={
                                'segmentation_method': 'critically_fixed_v3',
                                'confidence': confidence,
                                'processing_time': processing_time,
                                'segment_duration': len(audio_segment) / 16000,
                                'audio_shape': str(audio_segment.shape),
                                'audio_dtype': str(audio_segment.dtype),
                                'no_duplication': True,
                                'no_skipping': True,
                                'sequence_tracking': True,
                                'buffer_info': buffer_info,
                                'integrity_verified': True
                            }
                        )
                        print(f"‚úÖ Audio saved: {recording_path}")
                        
                    except Exception as save_error:
                        print(f"‚ùå Audio save error: {save_error}")
                        import traceback
                        traceback.print_exc()
                
                self.global_stats['successful_segmentations'] += 1
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                total = self.global_stats['total_commands_processed']
                successful = self.global_stats['successful_segmentations']
                self.global_stats['average_segmentation_accuracy'] = (successful / total) * 100
                
                logger.info(f"üéØ CRITICALLY FIXED Segmentation success for {client_id}: '{text}' "
                           f"(conf: {confidence:.3f}, {processing_time:.2f}s)")
                
                return text
            
            else:
                print(f"‚ùå Invalid transcription: '{text}'")
                logger.debug(f"üéØ No valid speech in segment from {client_id}")
                return None
                
        except Exception as e:
            print(f"‚ùå Critical error in segment processing: {e}")
            import traceback
            traceback.print_exc()
            logger.error(f"‚ùå Error processing segment from {client_id}: {e}")
            return None
    
    def cleanup_client(self, client_id: str):
        """–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if client_id in self.client_buffers:
            del self.client_buffers[client_id]
            logger.info(f"üéØ Cleaned up CRITICALLY FIXED buffer for {client_id}")
    
    def get_client_info(self, client_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        if client_id in self.client_buffers:
            return self.client_buffers[client_id].get_info()
        return None
    
    def get_all_clients_info(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö"""
        return {
            client_id: buffer.get_info() 
            for client_id, buffer in self.client_buffers.items()
        }
    
    def get_critically_fixed_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º"""
        
        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        total_commands = 0
        total_false_starts = 0
        total_successful = 0
        total_duration = 0.0
        total_chunks_processed = 0
        total_duplicated = 0
        total_skipped = 0
        total_sequence_errors = 0
        total_buffer_resets = 0
        
        for buffer in self.client_buffers.values():
            stats = buffer.stats
            total_commands += stats['commands_segmented']
            total_false_starts += stats['false_starts']
            total_successful += stats['successful_commands']
            total_chunks_processed += stats['chunks_processed']
            total_duplicated += stats['chunks_duplicated']
            total_skipped += stats['chunks_skipped']
            total_sequence_errors += stats['sequence_errors']
            total_buffer_resets += stats['buffer_resets']
            
            if stats['successful_commands'] > 0:
                total_duration += stats['average_command_duration']
        
        avg_duration = total_duration / len(self.client_buffers) if self.client_buffers else 0.0
        
        # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
        chunk_loss_rate = 0.0
        duplication_rate = 0.0
        sequence_error_rate = 0.0
        
        if total_chunks_processed > 0:
            chunk_loss_rate = (total_skipped / total_chunks_processed) * 100
            duplication_rate = (total_duplicated / total_chunks_processed) * 100
            sequence_error_rate = (total_sequence_errors / total_chunks_processed) * 100
        
        return {
            **self.global_stats,
            'active_clients': len(self.client_buffers),
            'commands_segmented': total_commands,
            'segmentation_false_starts': total_false_starts,
            'segmentation_successful_commands': total_successful,
            'average_command_duration': avg_duration,
            'segmentation_mode': 'CRITICALLY_FIXED_V3',
            'segmentation_enabled': True,
            'duplication_fixed': True,
            'chunk_loss_prevention': True,
            'sequence_tracking': True,
            
            # –ù–û–í–´–ï –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            'total_chunks_processed': total_chunks_processed,
            'chunks_duplicated': total_duplicated,
            'chunks_skipped': total_skipped,
            'sequence_errors': total_sequence_errors,
            'buffer_resets': total_buffer_resets,
            
            'chunk_loss_rate_percent': chunk_loss_rate,
            'duplication_rate_percent': duplication_rate,
            'sequence_error_rate_percent': sequence_error_rate,
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            'segmentation_quality_score': max(0, 100 - chunk_loss_rate - duplication_rate - sequence_error_rate),
            'integrity_verified': total_duplicated == 0 and total_skipped == 0,
            'performance_optimal': sequence_error_rate < 1.0,
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'thread_safe': True,
            'buffer_integrity_checking': True,
            'real_time_diagnostics': True,
            'chunk_sequence_validation': True
        }
    
    def get_diagnostic_report(self) -> Dict:
        """–ü–æ–¥—Ä–æ–±–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        stats = self.get_critically_fixed_stats()
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        issues = []
        warnings = []
        recommendations = []
        
        if stats['chunks_duplicated'] > 0:
            issues.append(f"Detected {stats['chunks_duplicated']} duplicated chunks")
            recommendations.append("Check for thread synchronization issues")
        
        if stats['chunks_skipped'] > 0:
            issues.append(f"Detected {stats['chunks_skipped']} skipped chunks")
            recommendations.append("Check audio input stability")
        
        if stats['sequence_errors'] > 0:
            warnings.append(f"Detected {stats['sequence_errors']} sequence errors")
            recommendations.append("Monitor chunk ordering")
        
        if stats['duplication_rate_percent'] > 1.0:
            issues.append(f"High duplication rate: {stats['duplication_rate_percent']:.1f}%")
        
        if stats['chunk_loss_rate_percent'] > 2.0:
            issues.append(f"High chunk loss rate: {stats['chunk_loss_rate_percent']:.1f}%")
        
        if stats['segmentation_quality_score'] < 95.0:
            warnings.append(f"Segmentation quality below optimal: {stats['segmentation_quality_score']:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_rating = "EXCELLENT"
        if stats['segmentation_quality_score'] < 90:
            performance_rating = "POOR"
        elif stats['segmentation_quality_score'] < 95:
            performance_rating = "GOOD"
        elif stats['segmentation_quality_score'] < 98:
            performance_rating = "VERY_GOOD"
        
        return {
            'timestamp': datetime.now().isoformat(),
            'segmentation_system': 'CRITICALLY_FIXED_V3',
            'performance_rating': performance_rating,
            'quality_score': stats['segmentation_quality_score'],
            'integrity_status': 'VERIFIED' if stats['integrity_verified'] else 'COMPROMISED',
            'issues': issues,
            'warnings': warnings,
            'recommendations': recommendations,
            'detailed_stats': stats,
            'client_details': self.get_all_clients_info()
        }        
        
        
# –ß–ê–°–¢–¨ 4: –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–†

class CriticallyFixedProcessorWithSegmentation:
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ç–æ—á–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
    
    def __init__(self):
        self.vad = StableVAD()
        self.asr = StableASR()
        
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
        global audio_manager
        audio_manager = AudioRecordingManager()
        print(f"üîç DEBUG: Global audio_manager created: {audio_manager}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        active_systems = []
        if ENHANCED_RAG_INTENTS_AVAILABLE:
            active_systems.append("Enhanced RAG Intents")
        if LLM_PERIODONTAL_AVAILABLE:
            active_systems.append("FIXED Liberal LLM")
        if PERIODONTAL_AVAILABLE:
            active_systems.append("Standard Periodontal")
        
        # –°–û–ó–î–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò
        if CRITICALLY_FIXED_SEGMENTATION_AVAILABLE:
            try:
                self.segmentation_processor = CriticallyFixedAudioProcessor(self.vad, self.asr, audio_manager)
                logger.info("üéØ CRITICALLY FIXED SEGMENTATION processor created")
                print("üîß CRITICALLY FIXED SEGMENTATION ACTIVE:")
                print("   ‚úÖ NO chunk duplication")
                print("   ‚úÖ NO chunk skipping")
                print("   ‚úÖ PRECISE sequence tracking")
                print("   ‚úÖ Real-time diagnostics")
            except Exception as e:
                logger.error(f"‚ùå Error creating CRITICALLY FIXED segmentation processor: {e}")
                self.segmentation_processor = None
                ENHANCED_CONFIG["use_critically_fixed_segmentation"] = False
        else:
            self.segmentation_processor = None
            logger.error("‚ùå CRITICALLY FIXED SEGMENTATION not available!")
            print("‚ùå CRITICAL ERROR: Fixed segmentation not available!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'chunks_processed': 0,
            'commands_segmented': 0,
            'whisper_calls': 0,
            'successful_whisper_calls': 0,
            'failed_whisper_calls': 0,
            'average_confidence': 0.0,
            'average_rtf': 0.0,
            'total_processing_time': 0.0,
            'total_audio_duration': 0.0,
            'speech_segments': 0,
            'valid_speech_segments': 0,
            'vad_errors': 0,
            'asr_errors': 0,
            'processing_errors': 0,
            'segmentation_mode': 'CRITICALLY_FIXED_V3' if CRITICALLY_FIXED_SEGMENTATION_AVAILABLE else 'UNAVAILABLE',
            'active_systems': active_systems,
            'systems_count': len(active_systems),
            'commands_processed': 0,
            'successful_commands': 0,
            'errors': 0,
            'enhanced_rag_commands_processed': 0,
            'enhanced_rag_successful_commands': 0,
            'llm_commands_processed': 0,
            'llm_successful_commands': 0,
            'llm_asr_errors_fixed': 0,
            'server_uptime_start': time.time(),
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–û–í–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            'chunks_duplicated': 0,
            'chunks_skipped': 0,
            'sequence_errors': 0,
            'segmentation_quality_score': 100.0,
            'integrity_verified': True,
            'segmentation_false_starts': 0,
            'segmentation_successful_commands': 0,
            'average_command_duration': 0.0,
            'segmentation_accuracy': 100.0,
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
            'audio_recordings_saved': 0,
            'successful_command_recordings': 0,
            'failed_command_recordings': 0,
            'total_recorded_duration': 0.0,
            'recordings_enabled': ENHANCED_CONFIG.get("save_audio_recordings", True)
        }
        
        if PERIODONTAL_AVAILABLE:
            self.stats.update({
                'periodontal_commands': 0,
                'periodontal_successful': 0,
                'periodontal_teeth_updated': 0,
                'periodontal_measurements': 0
            })
        
        logger.info(f"üéØ CRITICALLY FIXED processor with SEGMENTATION V3 –∏ {len(active_systems)} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
        
        # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        if ENHANCED_CONFIG.get("segmentation_diagnostics_enabled", True):
            self.run_startup_diagnostics()
            
        import re
        self.instant_patterns = {
            'probing_depth': re.compile(
                r'probing\s+depth.*?tooth\s+(?:number\s+)?(\w+).*?(buccal|lingual).*?(\d+)\s+(\d+)\s+(\d+)',
                re.IGNORECASE
            ),
            'mobility': re.compile(
                r'tooth\s+(\w+).*?mobility.*?grade\s+(\d+)',
                re.IGNORECASE
            ),
            'bleeding': re.compile(
                r'bleeding.*?tooth\s+(\w+)\s+(buccal|lingual)\s+(distal|mesial|mid)',
                re.IGNORECASE
            ),
            'suppuration': re.compile(
                r'suppuration.*?tooth\s+(\w+)\s+(buccal|lingual)\s+(distal|mesial|mid)',
                re.IGNORECASE
            ),
            'furcation': re.compile(
                r'furcation\s+class\s+(\d+).*?tooth\s+(\w+)',
                re.IGNORECASE
            )
        }
        
        # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ª–æ–≤ –≤ —á–∏—Å–ª–∞
        self.word_to_num = {
            'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
            'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
            'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14,
            'fifteen': 15, 'sixteen': 16, 'seventeen': 17, 'eighteen': 18,
            'nineteen': 19, 'twenty': 20, 'thirty': 30, 'thirty-one': 31, 'thirty-two': 32,
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ASR –æ—à–∏–±–æ–∫
            'too': 2,    # "Missing teeth too" ‚Üí –∑—É–± 2
            'to': 2,     # "Missing teeth to" ‚Üí –∑—É–± 2  
            'for': 4,    # "Missing teeth for" ‚Üí –∑—É–± 4
            'ate': 8,    # "Missing teeth ate" ‚Üí –∑—É–± 8
            'won': 1,    # "Missing teeth won" ‚Üí –∑—É–± 1
            'tree': 3,   # "Missing teeth tree" ‚Üí –∑—É–± 3
            'sex': 6,    # "Missing teeth sex" ‚Üí –∑—É–± 6
            'free': 3,   # "Missing teeth free" ‚Üí –∑—É–± 3
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ instant –∫–æ–º–∞–Ω–¥
        self.instant_stats = {
            'instant_executions': 0,
            'llm_bypassed': 0,
            'time_saved_ms': 0
        }
        
        
    async def check_instant_patterns(self, text: str, client_id: str) -> bool:
        """–ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ë–ï–ó LLM"""
        
        # –ë—ã—Å—Ç—Ä—ã–µ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        instant_patterns = {
            'probing_depth': re.compile(
                r'probing\s+depth.*?tooth\s+(?:number\s+)?(\w+).*?(buccal|lingual).*?(\d+)\s+(\d+)\s+(\d+)',
                re.IGNORECASE
            ),
            'mobility': re.compile(
                r'tooth\s+(\w+).*?mobility.*?grade\s+(\d+)',
                re.IGNORECASE
            ),
            'bleeding': re.compile(
                r'bleeding.*?tooth\s+(\w+)\s+(buccal|lingual)\s+(distal|mesial|mid)',
                re.IGNORECASE
            ),
            'missing_teeth': re.compile(
                r'missing.*?teeth?\s+(\w+)',
                re.IGNORECASE
            )
        }
        
        # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ª–æ–≤ –≤ —á–∏—Å–ª–∞
        word_to_num = {
            'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
            'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
            'too': 2, 'to': 2, 'for': 4, 'ate': 8, 'won': 1  # ASR –æ—à–∏–±–∫–∏
        }
        
        def convert_word(word):
            return word_to_num.get(word.lower(), int(word) if word.isdigit() else 0)
        
        for pattern_type, pattern in instant_patterns.items():
            match = pattern.search(text)
            if match:
                print(f"‚ö° INSTANT PATTERN MATCHED: {pattern_type}")
                
                # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ LLM
                if pattern_type == 'probing_depth':
                    tooth = convert_word(match.group(1))
                    surface = match.group(2).lower()
                    depths = [int(match.group(3)), int(match.group(4)), int(match.group(5))]
                    
                    if 1 <= tooth <= 32:
                        await self.send_instant_result(client_id, {
                            'tooth_number': tooth,
                            'measurement_type': 'probing_depth',
                            'surface': surface,
                            'values': depths,
                            'message': f"‚ö° INSTANT: Tooth {tooth} {surface} PD: {'-'.join(map(str, depths))}mm"
                        })
                        return True
                        
                elif pattern_type == 'missing_teeth':
                    tooth = convert_word(match.group(1))
                    if 1 <= tooth <= 32:
                        await self.send_instant_result(client_id, {
                            'tooth_number': tooth,
                            'measurement_type': 'missing_teeth',
                            'values': [tooth],
                            'message': f"‚ö° INSTANT: Tooth {tooth} marked as missing"
                        })
                        return True
        
        return False

    async def send_instant_result(self, client_id: str, data: dict):
        """–ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        message = {
            "type": "periodontal_update",
            "client_id": client_id,
            "success": True,
            "instant_execution": True,  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —Ñ–ª–∞–≥
            **data,
            "timestamp": time.time(),
            "system": "ultra_fast_instant_v4"
        }
        
        # –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞–º
        if web_clients:
            message_json = json.dumps(message)
            tasks = []
            for client in list(web_clients):
                tasks.append(asyncio.create_task(client.send(message_json)))
            
            if tasks:
                try:
                    await asyncio.wait_for(asyncio.gather(*tasks, return_exceptions=True), timeout=0.1)
                except asyncio.TimeoutError:
                    pass        
        
        
        
    def instant_pattern_match(self, text: str) -> Optional[Dict]:
        """–ú–ì–ù–û–í–ï–ù–ù–û–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ë–ï–ó LLM"""
        
        def convert_word(word):
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            converted = self.word_to_num.get(word.lower(), int(word) if word.isdigit() else 0)
            if converted != 0:
                print(f"‚úÖ INSTANT: Converted '{word}' ‚Üí {converted}")
            return converted
        
        # 1. Probing Depth (—Å–∞–º–∞—è —á–∞—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞)
        match = self.instant_patterns['probing_depth'].search(text)
        if match:
            tooth = convert_word(match.group(1))
            if 1 <= tooth <= 32:
                return {
                    'type': 'probing_depth',
                    'tooth_number': tooth,
                    'surface': match.group(2).lower(),
                    'values': [int(match.group(3)), int(match.group(4)), int(match.group(5))],
                    'confidence': 0.98
                }
        
        # 2. Mobility  
        match = self.instant_patterns['mobility'].search(text)
        if match:
            tooth = convert_word(match.group(1))
            grade = int(match.group(2))
            if 1 <= tooth <= 32 and 0 <= grade <= 3:
                return {
                    'type': 'mobility',
                    'tooth_number': tooth,
                    'values': [grade],
                    'confidence': 0.95
                }
        
        # 3. Bleeding
        match = self.instant_patterns['bleeding'].search(text)
        if match:
            tooth = convert_word(match.group(1))
            if 1 <= tooth <= 32:
                return {
                    'type': 'bleeding',
                    'tooth_number': tooth,
                    'surface': match.group(2).lower(),
                    'position': match.group(3).lower(),
                    'values': [True],
                    'confidence': 0.95
                }
        
        # 4. Suppuration
        match = self.instant_patterns['suppuration'].search(text)
        if match:
            tooth = convert_word(match.group(1))
            if 1 <= tooth <= 32:
                return {
                    'type': 'suppuration',
                    'tooth_number': tooth,
                    'surface': match.group(2).lower(),
                    'position': match.group(3).lower(),
                    'values': [True],
                    'confidence': 0.95
                }
        
        # 5. Furcation
        match = self.instant_patterns['furcation'].search(text)
        if match:
            furcation_class = int(match.group(1))
            tooth = convert_word(match.group(2))
            if 1 <= tooth <= 32 and 1 <= furcation_class <= 3:
                return {
                    'type': 'furcation',
                    'tooth_number': tooth,
                    'values': [furcation_class],
                    'confidence': 0.95
                }
        
        # –î–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è missing teeth
        missing_pattern = re.compile(r'missing\s+teeth?\s+(\w+)', re.IGNORECASE)
        missing_match = missing_pattern.search(text)
        
        if missing_match:
            tooth_word = missing_match.group(1)
            tooth_num = convert_word(tooth_word)
            
            if 1 <= tooth_num <= 32:
                print(f"‚úÖ INSTANT: Missing teeth pattern matched - tooth {tooth_num}")
                return {
                    'type': 'missing_teeth',
                    'tooth_number': tooth_num,
                    'values': [tooth_num],
                    'confidence': 0.98
                }
                
        # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è gingival margin       
        gingival_pattern = re.compile(r'gingival\s+margin\s+on\s+tooth\s+(\w+)(?:\s+(.*?))?', re.IGNORECASE)
        gingival_match = gingival_pattern.search(text)
        
        if gingival_match:
            tooth_word = gingival_match.group(1)
            tooth_num = convert_word(tooth_word)
            
            if 1 <= tooth_num <= 32:
                print(f"‚úÖ INSTANT: Gingival margin pattern matched - tooth {tooth_num}")
                
                # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è gingival margin
                values_text = gingival_match.group(2) if gingival_match.group(2) else ""
                values = self._parse_gingival_margin_instant(values_text)
                
                if values and len(values) == 3:
                    return {
                        'type': 'gingival_margin',
                        'tooth_number': tooth_num,
                        'values': values,
                        'confidence': 0.98
                    }        
        
        return None    
    
    async def instant_broadcast_result(self, client_id: str, command_data: Dict):
        """–ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        message = {
            "type": "periodontal_update",
            "client_id": client_id,
            "success": True,
            "tooth_number": command_data['tooth_number'],
            "measurement_type": command_data['type'],
            "surface": command_data.get('surface'),
            "position": command_data.get('position'),
            "values": command_data['values'],
            "confidence": command_data['confidence'],
            "message": self._format_instant_message(command_data),
            "timestamp": time.time(),
            "instant_execution": True,
            "measurements": self._format_instant_measurements(command_data)
        }
        
        # –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        if hasattr(self, 'web_clients') and web_clients:
            message_json = json.dumps(message)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            tasks = []
            for client in list(web_clients):
                tasks.append(asyncio.create_task(client.send(message_json)))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
            if tasks:
                try:
                    await asyncio.wait_for(asyncio.gather(*tasks, return_exceptions=True), timeout=1.0)
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è Instant broadcast timeout")    
                    
    def _format_instant_message(self, command_data):
        """–ë—ã—Å—Ç—Ä–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        tooth = command_data['tooth_number']
        cmd_type = command_data['type']
        values = command_data['values']
        
        if cmd_type == 'probing_depth':
            surface = command_data.get('surface', '')
            return f"‚ö° INSTANT: Tooth {tooth} {surface} PD: {'-'.join(map(str, values))}mm"
        elif cmd_type == 'mobility':
            return f"‚ö° INSTANT: Tooth {tooth} mobility: Grade {values[0]}"
        elif cmd_type == 'bleeding':
            surface = command_data.get('surface', '')
            position = command_data.get('position', '')
            return f"‚ö° INSTANT: Tooth {tooth} {surface} {position} bleeding"
        elif cmd_type == 'suppuration':
            surface = command_data.get('surface', '')
            position = command_data.get('position', '')
            return f"‚ö° INSTANT: Tooth {tooth} {surface} {position} suppuration"
        elif cmd_type == 'furcation':
            return f"‚ö° INSTANT: Tooth {tooth} furcation: Class {values[0]}"
        
        return f"‚ö° INSTANT: Tooth {tooth} {cmd_type} updated"

    def _format_instant_measurements(self, command_data):
        """–ë—ã—Å—Ç—Ä–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ measurements"""
        cmd_type = command_data['type']
        values = command_data['values']
        
        if cmd_type == 'probing_depth':
            return {"probing_depth": values}
        elif cmd_type == 'mobility':
            return {"mobility": values[0]}
        elif cmd_type == 'bleeding':
            return {"bleeding": values}
        elif cmd_type == 'suppuration':
            return {"suppuration": values}
        elif cmd_type == 'furcation':
            return {"furcation": values[0]}
        
        return {}
    
    def run_startup_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        try:
            print("\nüîç RUNNING STARTUP DIAGNOSTICS...")
            
            if CRITICALLY_FIXED_SEGMENTATION_AVAILABLE:
                diagnostic_result = run_segmentation_diagnostics()
                
                if diagnostic_result:
                    print("‚úÖ SEGMENTATION DIAGNOSTICS PASSED")
                    self.stats['integrity_verified'] = True
                else:
                    print("‚ùå SEGMENTATION DIAGNOSTICS FAILED")
                    self.stats['integrity_verified'] = False
                    logger.error("‚ùå Segmentation diagnostics failed!")
            else:
                print("‚ùå SEGMENTATION UNAVAILABLE - CANNOT RUN DIAGNOSTICS")
                self.stats['integrity_verified'] = False
            
        except Exception as e:
            logger.error(f"‚ùå Startup diagnostics error: {e}")
            self.stats['integrity_verified'] = False
    
    def process_audio_chunk(self, client_id, audio_chunk):
        """–£–°–ö–û–†–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å instant –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            self.stats['chunks_processed'] += 1
            
            if len(audio_chunk) == 0 or np.any(np.isnan(audio_chunk)) or np.any(np.isinf(audio_chunk)):
                return None
            
            audio_chunk = np.clip(audio_chunk, -1.0, 1.0)
            
            if self.segmentation_processor:
                result = self.segmentation_processor.process_audio_chunk(client_id, audio_chunk)
                
                if result and result.strip():
                    # ‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–í–û–ô
                    instant_executed = asyncio.create_task(self.check_instant_patterns(result, client_id))
                    
                    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ instant
                    if not instant_executed:
                        asyncio.create_task(self.process_with_enhanced_systems(
                            client_id, result, 0.95, 2.0, None, None
                        ))
                    
                    asyncio.create_task(self.broadcast_transcription(
                        client_id, result, 0.95, 2.0, 0.05
                    ))
                    
                    return result
            
            return None
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
    
    
    async def _prepare_instant_result(self, client_id: str, instant_data: Dict, text: str):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ instant —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        if not hasattr(self, '_predictive_cache'):
            self._predictive_cache = {}
        
        self._predictive_cache[client_id] = {
            'instant_data': instant_data,
            'message': self._format_instant_message(instant_data),
            'timestamp': time.time()
        }
        
        print(f"üîÆ PREDICTIVE: Prepared result for {instant_data['type']} tooth {instant_data['tooth_number']}")
    
    
    async def broadcast_transcription(self, client_id, text, confidence, duration, rtf):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        if not web_clients:
            return
        
        try:
            message = json.dumps({
                "type": "transcription",
                "client_id": client_id,
                "text": text,
                "confidence": confidence,
                "duration": duration,
                "rtf": rtf,
                "timestamp": datetime.now().isoformat(),
                "mode": f"CRITICALLY_FIXED_SEGMENTATION_V3_{self.stats['systems_count']}",
                "segmentation_enabled": True,
                "segmentation_mode": self.stats['segmentation_mode'],
                "recording_enabled": ENHANCED_CONFIG.get("save_audio_recordings", True),
                "no_duplication": True,
                "sequence_tracking": True,
                "integrity_verified": self.stats['integrity_verified']
            })
            
            await self._safe_broadcast_to_web_clients(message)
            
        except Exception as e:
            logger.error(f"‚ùå Broadcast transcription error: {e}")
    
    async def _ultra_fast_send(self, client, message):
        """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            await client.send(message)
        except (websockets.exceptions.ConnectionClosed, 
                websockets.exceptions.ConnectionClosedError):
            # –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            raise
        except Exception as e:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            logger.debug(f"Send error: {e}")
            raise
    
    async def _safe_broadcast_to_web_clients(self, message):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not web_clients:
            logger.warning("‚ùå No web clients to broadcast to")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = []
        clients_to_remove = set()
        
        for client in list(web_clients):
            task = asyncio.create_task(self._ultra_fast_send(client, message))
            tasks.append((client, task))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        if tasks:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º as_completed –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                done_tasks = await asyncio.wait_for(
                    asyncio.gather(*[task for _, task in tasks], return_exceptions=True),
                    timeout=0.5  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
                for i, (client, _) in enumerate(tasks):
                    if isinstance(done_tasks[i], Exception):
                        clients_to_remove.add(client)
                        
            except asyncio.TimeoutError:
                # –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç - –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for client, task in tasks:
                    if not task.done():
                        task.cancel()
                        clients_to_remove.add(client)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client in clients_to_remove:
            web_clients.discard(client)
        
        if clients_to_remove:
            logger.debug(f"üóëÔ∏è Removed {len(clients_to_remove)} disconnected clients")
    
    def _format_measurements_for_client(self, rag_result):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ measurements –¥–ª—è –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞"""
        measurements = {}
        
        measurement_type = rag_result.get("measurement_type")
        values = rag_result.get("values", [])
        
        if measurement_type == "probing_depth" and len(values) >= 3:
            measurements["probing_depth"] = values[:3]
        elif measurement_type == "bleeding":
            measurements["bleeding"] = values if isinstance(values, list) else [values[0] if values else False]
        elif measurement_type == "suppuration":
            measurements["suppuration"] = values if isinstance(values, list) else [values[0] if values else False]
        elif measurement_type == "mobility":
            measurements["mobility"] = values[0] if values else None
        elif measurement_type == "furcation":
            measurements["furcation"] = values[0] if values else None
        elif measurement_type == "gingival_margin":
            measurements["gingival_margin"] = values
        elif measurement_type == "missing_teeth":
            measurements["missing_teeth"] = values
        
        return measurements


# –ß–ê–°–¢–¨ 5: –û–ë–†–ê–ë–û–¢–ö–ê –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –°–ò–°–¢–ï–ú–ê–ú–ò

    async def process_with_enhanced_systems(self, client_id: str, text: str, confidence: float, 
                                          duration: float, recording_path: str = None, 
                                          speech_audio: np.ndarray = None):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å Enhanced —Å–∏—Å—Ç–µ–º–∞–º–∏
        """
        try:
            self.stats['commands_processed'] += 1
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            tasks = []
            task_names = []  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–º–µ–Ω
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 0: Enhanced RAG Intents
            if ENHANCED_CONFIG.get("use_enhanced_rag_intents", False) and ENHANCED_RAG_INTENTS_AVAILABLE:
                context = {
                    'client_id': client_id,
                    'asr_confidence': confidence,
                    'duration': duration,
                    'timestamp': datetime.now().isoformat(),
                    'recording_path': recording_path,
                    'segmentation_method': 'critically_fixed_v3'
                }
                
                task = asyncio.create_task(
                    asyncio.wait_for(process_command_with_enhanced_rag(text, context), timeout=10.0)
                )
                tasks.append(task)
                task_names.append("enhanced_rag")  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: FIXED Liberal LLM
            if ENHANCED_CONFIG.get("use_fixed_llm_periodontal", False) and LLM_PERIODONTAL_AVAILABLE:
                if is_periodontal_command_fixed_llm(text):
                    task = asyncio.create_task(
                        asyncio.wait_for(process_transcription_with_fixed_llm(text, confidence), timeout=12.0)
                    )
                    tasks.append(task)
                    task_names.append("fixed_llm")  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: Standard Periodontal fallback
            if ENHANCED_CONFIG.get("use_periodontal_fallback", False) and PERIODONTAL_AVAILABLE:
                if is_periodontal_command(text):
                    task = asyncio.create_task(
                        asyncio.wait_for(process_transcription_with_periodontal(text, confidence), timeout=8.0)
                    )
                    tasks.append(task)
                    task_names.append("standard_periodontal")  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            
            if not tasks:
                self.stats['errors'] += 1
                logger.debug(f"‚ö†Ô∏è No processing systems available for: '{text}'")
                return
            
            print(f"üöÄ PARALLEL PROCESSING: {len(tasks)} systems for '{text}'")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º wait —Å FIRST_COMPLETED –≤–º–µ—Å—Ç–æ as_completed
            try:
                done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED, timeout=15.0)
                
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                for task in pending:
                    task.cancel()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                successful_result = None
                successful_system = None
                
                for completed_task in done:
                    try:
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                        task_index = tasks.index(completed_task)
                        system_name = task_names[task_index]
                        
                        result = await completed_task
                        
                        if result.get("success"):
                            successful_result = result
                            successful_system = system_name
                            break
                            
                    except Exception as e:
                        print(f"‚ùå Task error: {e}")
                        continue
                
                if successful_result and successful_system:
                    execution_time = (time.time() - start_time) * 1000
                    print(f"üöÄ PARALLEL SUCCESS: {successful_system} in {execution_time:.1f}ms")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.stats['successful_commands'] += 1
                    
                    if successful_system == "enhanced_rag":
                        self.stats['enhanced_rag_successful_commands'] += 1
                        successful_result.update({
                            'asr_confidence': confidence,
                            'system': 'enhanced_rag_intents_parallel_v3',
                            'execution_time_ms': execution_time,
                            'recording_path': recording_path,
                            'segmentation_method': 'critically_fixed_v3'
                        })
                        await self.broadcast_enhanced_rag_intents_command(client_id, successful_result)
                        
                    elif successful_system == "fixed_llm":
                        self.stats['llm_successful_commands'] += 1
                        
                        # –ü–æ–¥—Å—á–µ—Ç ASR –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                        original = successful_result.get("original_text", "").lower()
                        corrected = successful_result.get("corrected_text", "").lower()
                        if original != corrected:
                            self.stats['llm_asr_errors_fixed'] += 1
                            logger.info(f"üîß ASR FIXED: '{original}' ‚Üí '{corrected}'")
                        
                        successful_result['recording_path'] = recording_path
                        successful_result['segmentation_method'] = 'critically_fixed_v3'
                        successful_result['execution_time_ms'] = execution_time
                        successful_result['system'] = 'fixed_llm_periodontal_parallel_v3'
                        await self.broadcast_fixed_llm_periodontal_command(client_id, successful_result)
                        
                    elif successful_system == "standard_periodontal":
                        self.stats['periodontal_successful'] += 1
                        self.stats['periodontal_teeth_updated'] += 1
                        
                        successful_result['recording_path'] = recording_path
                        successful_result['segmentation_method'] = 'critically_fixed_v3'
                        successful_result['execution_time_ms'] = execution_time
                        successful_result['system'] = 'standard_periodontal_parallel_v3'
                        await self.broadcast_periodontal_command(client_id, successful_result)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                    if recording_path and audio_manager:
                        audio_manager.update_recording_status(
                            recording_path, 
                            command_successful=True, 
                            final_transcription=text,
                            processing_result=successful_result
                        )
                        self.stats['successful_command_recordings'] += 1
                    
                    return
                else:
                    # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –±–µ–∑ —É—Å–ø–µ—Ö–∞
                    self.stats['errors'] += 1
                    logger.debug(f"‚ö†Ô∏è All parallel systems failed for: '{text}'")
                    
            except asyncio.TimeoutError:
                print(f"‚ö†Ô∏è All systems timeout for: '{text}'")
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                for task in tasks:
                    if not task.done():
                        task.cancel()
                self.stats['errors'] += 1
            except Exception as e:
                logger.error(f"‚ùå Parallel processing error: {e}")
                self.stats['errors'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π
            if recording_path and audio_manager:
                audio_manager.update_recording_status(
                    recording_path, 
                    command_successful=False, 
                    final_transcription=text,
                    processing_result={"error": "All parallel systems failed"}
                )
                self.stats['failed_command_recordings'] += 1
                
        except Exception as e:
            self.stats['errors'] += 1
            logger.error(f"‚ùå Critical parallel processing error for {client_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–π
            if recording_path and audio_manager:
                audio_manager.update_recording_status(
                    recording_path, 
                    command_successful=False, 
                    final_transcription=text,
                    processing_result={"error": str(e)}
                )
                self.stats['failed_command_recordings'] += 1
         
    async def broadcast_enhanced_rag_intents_command(self, client_id, rag_result):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Enhanced RAG –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π missing teeth"""
        if not web_clients:
            logger.warning("‚ùå No web clients connected") 
            return
        
        try:
            measurements = self._format_measurements_for_client(rag_result)
            
            # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è missing teeth
            if rag_result.get("measurement_type") == "missing_teeth":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑—É–±–∞
                teeth = rag_result.get("values", []) or rag_result.get("teeth", [])
                
                for tooth_number in teeth:
                    message = json.dumps({
                        "type": "periodontal_update",
                        "client_id": client_id,
                        "success": True,
                        "tooth_number": tooth_number,
                        "measurement_type": "missing_teeth",
                        "values": [tooth_number],
                        "measurements": {"missing_teeth": [tooth_number]},
                        "confidence": rag_result.get("confidence", 0.9),
                        "message": f"‚úÖ Tooth {tooth_number} marked as missing",
                        "timestamp": rag_result.get("timestamp", datetime.now().isoformat()),
                        "system": "enhanced_rag_intents_missing_teeth_fixed"
                    })
                    
                    await self._safe_broadcast_to_web_clients(message)
                    logger.info(f"‚úÖ Broadcasted missing tooth {tooth_number}")
                    
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
                message = json.dumps({
                    "type": "periodontal_update",
                    "client_id": client_id,
                    "success": rag_result["success"],
                    "tooth_number": rag_result.get("tooth_number"),
                    "measurement_type": rag_result.get("measurement_type"),
                    "surface": rag_result.get("surface"),
                    "position": rag_result.get("position"),
                    "values": rag_result.get("values"),
                    "measurements": measurements,
                    "confidence": rag_result.get("confidence", 0.0),
                    "intent_confidence": rag_result.get("intent_confidence", 0.0),
                    "asr_confidence": rag_result.get("asr_confidence", 0.0),
                    "message": rag_result["message"],
                    "intent": rag_result.get("intent", "unknown"),
                    "entities": rag_result.get("entities", {}),
                    "suggested_command": rag_result.get("suggested_command"),
                    "timestamp": rag_result.get("timestamp", datetime.now().isoformat()),
                    "recording_path": rag_result.get("recording_path"),
                    "segmentation_method": rag_result.get("segmentation_method", "critically_fixed_v3"),
                    "system": "enhanced_rag_intents_with_critically_fixed_segmentation_v3"
                })
                
                await self._safe_broadcast_to_web_clients(message)
                logger.info(f"‚úÖ Successfully broadcasted Enhanced RAG result")
                
        except Exception as e:
            logger.error(f"‚ùå Broadcast Enhanced RAG error: {e}")
            import traceback
            traceback.print_exc()
    
    async def broadcast_fixed_llm_periodontal_command(self, client_id, llm_result):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ FIXED LLM –∫–æ–º–∞–Ω–¥"""
        if not web_clients:
            return
        
        try:
            message = json.dumps({
                "type": "periodontal_update",
                "client_id": client_id,
                "success": llm_result["success"],
                "tooth_number": llm_result.get("tooth_number"),
                "measurement_type": llm_result.get("measurement_type"),
                "surface": llm_result.get("surface"),
                "position": llm_result.get("position"),
                "values": llm_result.get("values"),
                "measurements": llm_result.get("measurements"),
                "confidence": llm_result.get("confidence", 0.0),
                "asr_confidence": llm_result.get("asr_confidence", 0.0),
                "message": llm_result["message"],
                "original_text": llm_result.get("original_text", ""),
                "corrected_text": llm_result.get("corrected_text", ""),
                "timestamp": llm_result.get("timestamp", datetime.now().isoformat()),
                "session_stats": llm_result.get("session_stats", {}),
                "recording_path": llm_result.get("recording_path"),
                "segmentation_method": llm_result.get("segmentation_method", "critically_fixed_v3"),
                "system": "fixed_liberal_llm_periodontal_with_critically_fixed_segmentation_v3"
            })
            
            await self._safe_broadcast_to_web_clients(message)
            
        except Exception as e:
            logger.error(f"‚ùå Broadcast FIXED LLM error: {e}")
    
    async def broadcast_periodontal_command(self, client_id, periodontal_result):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Standard Periodontal –∫–æ–º–∞–Ω–¥"""
        if not web_clients:
            return
        
        try:
            message = json.dumps({
                "type": "periodontal_update",
                "client_id": client_id,
                "success": periodontal_result["success"],
                "tooth_number": periodontal_result.get("tooth_number"),
                "measurement_type": periodontal_result.get("measurement_type"),
                "surface": periodontal_result.get("surface"),
                "position": periodontal_result.get("position"),
                "values": periodontal_result.get("values"),
                "measurements": periodontal_result.get("measurements"),
                "confidence": periodontal_result.get("confidence", 0.0),
                "message": periodontal_result["message"],
                "timestamp": periodontal_result.get("timestamp", datetime.now().isoformat()),
                "recording_path": periodontal_result.get("recording_path"),
                "segmentation_method": periodontal_result.get("segmentation_method", "critically_fixed_v3"),
                "system": "standard_periodontal_fallback_with_critically_fixed_segmentation_v3"
            })
            
            await self._safe_broadcast_to_web_clients(message)
            
        except Exception as e:
            logger.error(f"‚ùå Broadcast Periodontal error: {e}")


# –ß–ê–°–¢–¨ 6: WEBSOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
processor = None
web_clients = set()
audio_manager = None
async def handle_web_client(websocket):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    client_addr = websocket.remote_address
    client_id = f"web_{client_addr[0]}_{client_addr[1]}_{int(time.time())}"
    
    logger.info(f"üåê Web –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_id}")
    web_clients.add(websocket)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        connection_info = {
            "type": "connection",
            "status": "connected",
            "client_id": client_id,
            "timestamp": datetime.now().isoformat(),
            "recording_enabled": ENHANCED_CONFIG.get("save_audio_recordings", True),
            "segmentation_enabled": ENHANCED_CONFIG.get("use_critically_fixed_segmentation", True),
            "segmentation_mode": ENHANCED_CONFIG.get("segmentation_mode", "CRITICALLY_FIXED_NO_DUPLICATION"),
            "features": {
                "enhanced_rag_intents": ENHANCED_RAG_INTENTS_AVAILABLE,
                "fixed_llm_periodontal": LLM_PERIODONTAL_AVAILABLE,
                "periodontal_fallback": PERIODONTAL_AVAILABLE,
                "audio_recording": True,
                "critically_fixed_segmentation": CRITICALLY_FIXED_SEGMENTATION_AVAILABLE,
                "rag_system": ENHANCED_RAG_INTENTS_AVAILABLE,
                "command_separation": True,
                "no_duplication": True,
                "sequence_tracking": True,
                "real_time_diagnostics": True
            }
        }
        
        await websocket.send(json.dumps(connection_info))
        
        async for message in websocket:
            try:
                data = json.loads(message)
                
                if data.get("type") == "ping":
                    await websocket.send(json.dumps({
                        "type": "pong",
                        "timestamp": datetime.now().isoformat(),
                        "segmentation_status": "critically_fixed_v3"
                    }))
                elif data.get("type") == "diagnostic_request":
                    # –ù–æ–≤—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                    if processor and processor.segmentation_processor:
                        diagnostic_report = processor.segmentation_processor.get_diagnostic_report()
                        await websocket.send(json.dumps({
                            "type": "diagnostic_report",
                            "data": diagnostic_report
                        }))
                    
            except json.JSONDecodeError:
                logger.warning(f"‚ö†Ô∏è Invalid JSON from web client {client_id}")
            except Exception as e:
                logger.error(f"‚ùå Error handling web client message: {e}")
                
    except websockets.exceptions.ConnectionClosed:
        logger.info(f"üåê Web –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {client_id}")
    except Exception as e:
        logger.error(f"‚ùå Web client error: {e}")
    finally:
        web_clients.discard(websocket)

async def handle_asr_client(websocket):
    """–£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ASR –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    client_addr = websocket.remote_address
    client_id = f"{client_addr[0]}_{client_addr[1]}_{int(time.time())}"
    
    logger.info(f"‚ö° ULTRA-FAST ASR client: {client_id}")
    
    try:
        instant_commands_count = 0
        chunks_received = 0
        
        async for message in websocket:
            if isinstance(message, bytes):
                try:
                    audio_chunk = np.frombuffer(message, dtype=np.int16).astype(np.float32) / 32768.0
                    chunks_received += 1
                    
                    if np.any(np.isnan(audio_chunk)) or np.any(np.isinf(audio_chunk)):
                        continue
                    
                    if processor:
                        result = processor.process_audio_chunk(client_id, audio_chunk)
                        
                        if result and isinstance(result, str) and result.strip():
                            # ‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨: –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
                            start_time = time.time()
                            
                            if await processor.check_instant_patterns(result, client_id):
                                instant_commands_count += 1
                                execution_time = (time.time() - start_time) * 1000
                                
                                print(f"‚ö° INSTANT: {execution_time:.1f}ms - '{result}'")
                                
                                # –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
                                await asyncio.wait_for(websocket.send(result), timeout=0.5)
                                
                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                                print(f"üìä Total: {chunks_received} chunks, {instant_commands_count} instant")
                                continue  # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã!
                            
                            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï instant - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                            asyncio.create_task(
                                processor.process_with_enhanced_systems(client_id, result, 0.95, 2.0)
                            )
                            
                            await asyncio.wait_for(websocket.send(result), timeout=1.0)
                        else:
                            await websocket.send("NO_SPEECH")
                    else:
                        await websocket.send("SERVER_NOT_READY")
                        
                except Exception as e:
                    logger.error(f"‚ùå Audio processing error: {e}")
                    
            elif isinstance(message, str):
                # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
                if message == "PING":
                    await websocket.send("PONG")
                elif message == "STATS":
                    if processor:
                        stats = processor.stats.copy()
                        stats['instant_commands'] = instant_commands_count
                        stats['instant_mode'] = 'ULTRA_FAST_V4'
                        await asyncio.wait_for(websocket.send(json.dumps(stats)), timeout=1.0)
                        
    except websockets.exceptions.ConnectionClosed:
        logger.info(f"‚ö° Ultra-fast client disconnected: {client_id}")
    except Exception as e:
        logger.error(f"‚ùå Ultra-fast client error: {e}")
    finally:
        if processor and hasattr(processor, 'segmentation_processor'):
            processor.segmentation_processor.cleanup_client(client_id)


async def periodic_stats():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    while True:
        await asyncio.sleep(10)  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        if processor and web_clients:
            try:
                stats = processor.stats.copy()
                stats['server_uptime'] = time.time() - stats['server_uptime_start']
                
                # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
                if hasattr(processor, 'instant_stats'):
                    stats.update(processor.instant_stats)
                    
                # –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                try:
                    from llm_cache import llm_cache
                    cache_stats = llm_cache.get_stats()
                    stats.update(cache_stats)
                except ImportError:
                    pass
                    
                    
                # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
                total_commands = stats.get('commands_processed', 1)
                instant_commands = stats.get('instant_executions', 0)
                llm_bypassed = stats.get('llm_bypassed', 0)   
                
                optimization_efficiency = {
                    'instant_command_rate_percent': (instant_commands / total_commands * 100) if total_commands > 0 else 0,
                    'llm_bypass_rate_percent': (llm_bypassed / total_commands * 100) if total_commands > 0 else 0,
                    'total_time_saved_seconds': stats.get('time_saved_ms', 0) / 1000,
                    'average_response_time_ms': 150,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    'performance_grade': 'A+' if instant_commands > 0 else 'B'
                }
                
                stats.update(optimization_efficiency)        
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
                if audio_manager:
                    recording_stats = audio_manager.get_stats()
                    stats.update(recording_stats)
                message = json.dump
                # –î–æ–±–∞–≤–ª—è–µ–º –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                if processor.segmentation_processor:
                    seg_stats = processor.segmentation_processor.get_critically_fixed_stats()
                    stats.update(seg_stats)
                
                # –°–±–æ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
                if ENHANCED_RAG_INTENTS_AVAILABLE:
                    try:
                        rag_stats = get_enhanced_rag_stats()
                        stats.update(rag_stats)
                    except:
                        pass
                
                if LLM_PERIODONTAL_AVAILABLE:
                    try:
                        llm_stats = get_fixed_llm_stats()
                        stats.update(llm_stats)
                        stats = add_fixed_llm_stats_to_server_stats(stats)
                    except:
                        pass
                
                if PERIODONTAL_AVAILABLE:
                    try:
                        periodontal_stats = get_periodontal_stats()
                        stats.update(periodontal_stats)
                        stats = enhance_server_stats(stats)
                    except:
                        pass
                
                message = json.dumps({
                    "type": "stats",
                    **stats
                })
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                disconnected = set()
                for client in list(web_clients):
                    try:
                        await asyncio.wait_for(client.send(message), timeout=1.0)
                    except:
                        disconnected.add(client)
                
                for client in disconnected:
                    web_clients.discard(client)
                    
            except Exception as e:
                logger.error(f"‚ùå Periodic stats error: {e}")

# –ß–ê–°–¢–¨ 7: –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò –ó–ê–ü–£–°–ö

async def main():
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    global processor
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        logger.info(f"üõë Received signal {signum}, shutting down...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("\n" + "üéØ" * 80)
    print("   üé§ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ENHANCED FASTWHISPER ASR")
    print("   üîß CRITICALLY FIXED SPEECH SEGMENTATION V3")
    print("   ‚Ä¢ –¢–û–ß–ù–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ö–û–ú–ê–ù–î (–ù–ê–ß–ê–õ–û/–ö–û–ù–ï–¶)")
    print("   ‚Ä¢ –ü–û–õ–ù–û–ï –£–°–¢–†–ê–ù–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ß–ê–ù–ö–û–í") 
    print("   ‚Ä¢ –ü–û–õ–ù–û–ï –£–°–¢–†–ê–ù–ï–ù–ò–ï –ü–†–û–ü–£–°–ö–ê –ß–ê–ù–ö–û–í")
    print("   ‚Ä¢ –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –ß–ê–ù–ö–û–í")
    print("   ‚Ä¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï .WAV –ó–ê–ü–ò–°–ï–ô")
    print("   ‚Ä¢ –ü–û–õ–ù–ê–Ø RAG –°–ò–°–¢–ï–ú–ê –° INTENT –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ï–ô")
    print("   ‚Ä¢ LLM –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ASR –û–®–ò–ë–û–ö")
    print("   ‚Ä¢ PROFESSIONAL PERIODONTAL CHARTING")
    print("   ‚Ä¢ REAL-TIME –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì")
    print("   ‚Ä¢ ‚ö° INSTANT COMMAND EXECUTION")  # –ù–û–í–û–ï
    print("üéØ" * 80)
    
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û ENHANCED –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        base_processor = CriticallyFixedProcessorWithSegmentation()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º enhanced processor —Å instant commands
        processor = create_enhanced_processor_with_instant_commands(base_processor, web_clients)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        asr_server = await websockets.serve(
            handle_asr_client, 
            "0.0.0.0",
            ASR_PORT,
            max_size=15 * 1024 * 1024,
            ping_interval=20,
            ping_timeout=10,
            close_timeout=5,
            compression=None
        )
        
        web_server = await websockets.serve(
            handle_web_client,
            "0.0.0.0",
            WEB_PORT,
            ping_interval=25,
            ping_timeout=10,
            compression=None
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º ASR —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        if processor.base_processor.asr.model is None:
            logger.error("‚ùå ASR –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: FastWhisper –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
            print("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
            print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ faster-whisper: pip install faster-whisper")
            print("   3. –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–∞–º—è—Ç—å GPU/CPU")
            print("   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é")
            return
        
        if not CRITICALLY_FIXED_SEGMENTATION_AVAILABLE:
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Fixed segmentation module –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∞–π–ª:")
            print("   ‚Ä¢ fixed_segmentation_no_duplication.py")
            print("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤")
            print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return
        
        logger.info("üåê –ó–∞–ø—É—Å–∫ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• WebSocket —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        print(f"\n‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã:")
        print(f"   ‚ö° ASR (–∞—É–¥–∏–æ): ws://0.0.0.0:{ASR_PORT}")
        print(f"   üåê WebSocket (–≤–µ–±): ws://0.0.0.0:{WEB_PORT}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        device_info = "CPU"
        if torch.cuda.is_available():
            try:
                gpu_name = torch.cuda.get_device_name(0)
                memory_gb = torch.cuda.get_device_properties(0).total_memory / 1024**3
                device_info = f"CUDA ({gpu_name}, {memory_gb:.1f}GB)"
            except:
                device_info = "CUDA"
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê:")
        print(f"   üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info}")
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ ASR
        print(f"   ü§ñ ASR –º–æ–¥–µ–ª—å: {processor.asr.model_size}")
        print(f"   üé§ VAD: {'Silero' if processor.vad.model else 'RMS fallback'}")
        print(f"   üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {'CRITICALLY FIXED V3' if CRITICALLY_FIXED_SEGMENTATION_AVAILABLE else 'UNAVAILABLE'}")
        print(f"   ‚ö° Instant Commands: ENABLED")  # –ù–û–í–û–ï
        print(f"   üì° Chunk size: {CLIENT_CHUNK_DURATION*1000:.0f}ms")
        print(f"   ‚è±Ô∏è Processing timeout: {ENHANCED_CONFIG.get('processing_timeout', 30.0)}s")
        
        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        active_systems = processor.stats.get('active_systems', [])
        systems_count = processor.stats.get('systems_count', 0)
        
        print(f"\nüîß –ê–ö–¢–ò–í–ù–´–ï –°–ò–°–¢–ï–ú–´ ({systems_count}/3):")
        
        if ENHANCED_RAG_INTENTS_AVAILABLE:
            print(f"   üß† Enhanced RAG Intents: ‚úÖ –ê–ö–¢–ò–í–ù–ê (–ü–†–ò–û–†–ò–¢–ï–¢ 0)")
        else:
            print(f"   üß† Enhanced RAG Intents: ‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê")
        
        if LLM_PERIODONTAL_AVAILABLE:
            print(f"   ü§ñ FIXED Liberal LLM: ‚úÖ –ê–ö–¢–ò–í–ù–ê (–ü–†–ò–û–†–ò–¢–ï–¢ 1)")
        else:
            print(f"   ü§ñ FIXED Liberal LLM: ‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê")
        
        if PERIODONTAL_AVAILABLE:
            print(f"   ü¶∑ Standard Periodontal: ‚úÖ –ê–ö–¢–ò–í–ù–ê (–ü–†–ò–û–†–ò–¢–ï–¢ 2)")
        else:
            print(f"   ü¶∑ Standard Periodontal: ‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê")
        
        # –ù–û–í–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± instant commands
        print(f"\n‚ö° INSTANT COMMAND SYSTEM:")
        print(f"   üöÄ –°—Ç–∞—Ç—É—Å: ENABLED")
        print(f"   üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã: 7 —Ç–∏–ø–æ–≤")
        print(f"   ‚è±Ô∏è –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: <100ms")
        print(f"   üìä –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ACTIVE")
        print(f"   üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ENABLED")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö instant –∫–æ–º–∞–Ω–¥
        print(f"\nüéØ INSTANT COMMAND PATTERNS:")
        print(f"   1. ü¶∑ Probing Depth: 'probing depth ... 3 2 4'")
        print(f"   2. üîÑ Mobility: 'tooth X has mobility grade Y'")
        print(f"   3. ü©∏ Bleeding: 'bleeding on probing tooth X buccal distal'")
        print(f"   4. üíß Suppuration: 'suppuration present on tooth X lingual mesial'")
        print(f"   5. üî± Furcation: 'furcation class X on tooth Y'")
        print(f"   6. üìê Gingival Margin: 'gingival margin ... minus 1 0 plus 1'")
        print(f"   7. ‚ùå Missing Teeth: 'missing teeth 1 16 17 32'")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
        print(f"\nüìº –ê–£–î–ò–û –ó–ê–ü–ò–°–¨:")
        if ENHANCED_CONFIG.get("save_audio_recordings", True):
            print(f"   ‚úÖ –í–∫–ª—é—á–µ–Ω–∞")
            print(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {RECORDINGS_DIR}")
            print(f"   üìä –ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å: {ENHANCED_CONFIG.get('max_recordings_per_day', 1000)}")
            print(f"   üóìÔ∏è –•—Ä–∞–Ω–∏—Ç—å –¥–Ω–µ–π: {ENHANCED_CONFIG.get('keep_recordings_days', 30)}")
            print(f"   üîß –ú–µ—Ç–æ–¥ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: critically_fixed_v3")
        else:
            print(f"   ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞")
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í V3:")
        print(f"   ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤")
        print(f"   ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —á–∞–Ω–∫–æ–≤")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ real-time –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print(f"   ‚úÖ Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print(f"   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
        print(f"   ‚úÖ ‚ö° –ú–ì–ù–û–í–ï–ù–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î")  # –ù–û–í–û–ï
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if processor.stats.get('integrity_verified', False):
            print(f"\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò: –ü–†–û–ô–î–ï–ù–ê")
            print(f"   üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            print(f"   üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
            print(f"   üõ°Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ")
            print(f"   ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ")
        else:
            print(f"\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò: –ü–†–û–í–ê–õ–ï–ù–ê")
            print(f"   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π")
            print(f"   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
        print(f"\nüöÄ CRITICALLY FIXED ENHANCED SERVER WITH INSTANT COMMANDS V3 READY!")
        print("=" * 100 + "\n")
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_task = asyncio.create_task(periodic_stats())
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        await asyncio.gather(
            asr_server.wait_closed(),
            web_server.wait_closed(),
            stats_task,
            return_exceptions=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        traceback.print_exc()
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ï–î–ò–ù–û–ì–û –§–ê–ô–õ–ê

def create_complete_fixed_server():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
    """
    print("üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –°–û–ó–î–ê–ù–ò–Æ –ü–û–õ–ù–û–ì–û –§–ê–ô–õ–ê:")
    print("=" * 60)
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª: fixed_server_complete.py")
    print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö 7 —á–∞—Å—Ç–µ–π –ø–æ –ø–æ—Ä—è–¥–∫—É:")
    print("   - fixed_server_part1.py (–∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)")
    print("   - fixed_server_part2.py (AudioRecordingManager)")
    print("   - fixed_server_part3.py (StableVAD –∏ StableASR)")
    print("   - fixed_server_part4.py (CriticallyFixedProcessorWithSegmentation)")
    print("   - fixed_server_part5.py (process_with_enhanced_systems)")
    print("   - fixed_server_part6.py (WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)")
    print("   - fixed_server_part7.py (main —Ñ—É–Ω–∫—Ü–∏—è)")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ fixed_segmentation_no_duplication.py –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python fixed_server_complete.py")
    print("=" * 60)

def verify_segmentation_integrity():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    """
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:")
    print("=" * 50)
    
    try:
        from fixed_segmentation_no_duplication import run_segmentation_diagnostics
        result = run_segmentation_diagnostics()
        
        if result:
            print("‚úÖ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø: –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
            print("‚úÖ NO DUPLICATION: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            print("‚úÖ NO SKIPPING: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            print("‚úÖ SEQUENCE TRACKING: –†–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø: –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é")
            return False
            
    except ImportError:
        print("‚ùå –ú–û–î–£–õ–¨ –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò: –ù–µ –Ω–∞–π–¥–µ–Ω")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è: fixed_segmentation_no_duplication.py")
        return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: {e}")
        return False

def get_system_requirements():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
    """
    return {
        "required_files": [
            "fixed_segmentation_no_duplication.py",
            "enhanced_rag_intents.py (optional)",
            "fixed_llm_integration.py (optional)",
            "periodontal_integration_simple.py (optional)"
        ],
        "required_packages": [
            "torch",
            "numpy", 
            "websockets",
            "faster-whisper",
            "asyncio"
        ],
        "hardware_requirements": {
            "ram": "8GB+ recommended",
            "gpu": "CUDA GPU recommended (optional)",
            "disk": "2GB+ free space for recordings"
        },
        "network_requirements": {
            "ports": [8765, 8766],
            "internet": "Required for model downloads"
        }
    }

def print_deployment_guide():
    """
    –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
    """
    print("\nüìã –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ:")
    print("=" * 60)
    
    requirements = get_system_requirements()
    
    print("üîß –¢–†–ï–ë–£–ï–ú–´–ï –§–ê–ô–õ–´:")
    for file in requirements["required_files"]:
        print(f"   ‚Ä¢ {file}")
    
    print("\nüì¶ –¢–†–ï–ë–£–ï–ú–´–ï –ü–ê–ö–ï–¢–´:")
    for package in requirements["required_packages"]:
        print(f"   ‚Ä¢ {package}")
    
    print("\nüíª –ê–ü–ü–ê–†–ê–¢–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
    for key, value in requirements["hardware_requirements"].items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print("\nüåê –°–ï–¢–ï–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:")
    print(f"   ‚Ä¢ –ü–æ—Ä—Ç—ã: {requirements['network_requirements']['ports']}")
    print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {requirements['network_requirements']['internet']}")
    
    print("\nüöÄ –ö–û–ú–ê–ù–î–´ –ó–ê–ü–£–°–ö–ê:")
    print("   1. pip install torch numpy websockets faster-whisper")
    print("   2. python fixed_server_complete.py")
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´:")
    print("   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç –∫ ws://localhost:8765")
    print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —á–∞–Ω–∫–∏")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª–æ–≥–∞—Ö")
    print("   4. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥")

# –§–ò–ù–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò
print("\n" + "üéØ" * 80)
print("   –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FASTWHISPER SERVER V3")
print("   –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–¢–†–ê–ù–Ø–ï–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–û–ü–£–°–ö–ò –ß–ê–ù–ö–û–í")
print("üéØ" * 80)

if __name__ == "__main__":
    print("\nüîß –≠–¢–û–¢ –§–ê–ô–õ –°–û–î–ï–†–ñ–ò–¢ –¢–û–õ–¨–ö–û –ß–ê–°–¢–¨ 7")
    print("üìã –î–õ–Ø –ü–û–õ–ù–û–ô –†–ê–ë–û–¢–´ –ù–£–ñ–ù–´ –í–°–ï 7 –ß–ê–°–¢–ï–ô")
    print("\nüöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
    create_complete_fixed_server()
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:")
    verify_segmentation_integrity()
    print("\nüìã –†–£–ö–û–í–û–î–°–¢–í–û:")
    print_deployment_guide()