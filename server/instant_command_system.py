#!/usr/bin/env python3
"""
INSTANT COMMAND COMPLETION SYSTEM
–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
"""

import re
import json
import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
import time
import numpy as np

# –î–û–ë–ê–í–¨–¢–ï —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SpeechState –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:
try:
    from fixed_segmentation_no_duplication import SpeechState
    SEGMENTATION_AVAILABLE = True
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
    class SpeechState(Enum):
        SILENCE = "silence"
        SPEECH_DETECTION = "speech_detection" 
        SPEECH_ACTIVE = "speech_active"
        SPEECH_ENDING = "speech_ending"
    SEGMENTATION_AVAILABLE = False

logger = logging.getLogger(__name__)

class CommandCompleteness(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
    INCOMPLETE = "incomplete"          # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    COMPLETE = "complete"             # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    PARTIAL_MATCH = "partial_match"   # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    INVALID = "invalid"               # –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

@dataclass
class CommandPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏"""
    pattern: str
    required_groups: List[str]
    completion_rules: Dict[str, any]
    command_type: str
    priority: int = 0

class InstantCommandAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self):
        self.command_patterns = self._initialize_command_patterns()
        self.partial_commands = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ client_id
        
    def _initialize_command_patterns(self) -> List[CommandPattern]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏"""
        
        return [
            # 1. PROBING DEPTH - —Ç—Ä–µ–±—É–µ—Ç 3 —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ surface
            CommandPattern(
                pattern=r'probing\s+depth\s+on\s+tooth\s+(?:number\s+)?(\w+)[,]?\s+(buccal|lingual)\s+surface\s+(\w+)[,]?\s+(\w+)[,]?\s+(\w+)[.]?',
                required_groups=['tooth', 'surface', 'depth1', 'depth2', 'depth3'],
                completion_rules={
                    'min_required_groups': 5,  # –í—Å–µ 5 –≥—Ä—É–ø–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
                    'validation': {
                        'tooth': lambda x: 1 <= int(x) <= 32,
                        'surface': lambda x: x.lower() in ['buccal', 'lingual'],
                        'depth1': lambda x: 1 <= int(x) <= 12,
                        'depth2': lambda x: 1 <= int(x) <= 12,
                        'depth3': lambda x: 1 <= int(x) <= 12,
                    }
                },
                command_type='probing_depth',
                priority=1
            ),
            
            # 2. MOBILITY - —Ç—Ä–µ–±—É–µ—Ç grade + —á–∏—Å–ª–æ
            CommandPattern(
                pattern=r'tooth\s+(\w+)\s+has\s+mobility(?:\s+grade\s+(\w+))?',
                required_groups=['tooth', 'grade'],
                completion_rules={
                    'min_required_groups': 2,
                    'validation': {
                        'tooth': lambda x: 1 <= int(x) <= 32,
                        'grade': lambda x: 0 <= int(x) <= 3,
                    }
                },
                command_type='mobility',
                priority=1
            ),
            
            # 3. BLEEDING ON PROBING - —Ç—Ä–µ–±—É–µ—Ç tooth + surface + position
            CommandPattern(
                pattern=r'bleeding\s+on\s+probing\s+tooth\s+(\w+)\s+(buccal|lingual)\s+(distal|mesial|mid|middle)',
                required_groups=['tooth', 'surface', 'position'],
                completion_rules={
                    'min_required_groups': 3,
                    'validation': {
                        'tooth': lambda x: 1 <= int(x) <= 32,
                        'surface': lambda x: x.lower() in ['buccal', 'lingual'],
                        'position': lambda x: x.lower() in ['distal', 'mesial', 'mid', 'middle'],
                    }
                },
                command_type='bleeding_on_probing',
                priority=1
            ),
            
            # 4. SUPPURATION - —Ç—Ä–µ–±—É–µ—Ç tooth + surface + position
            CommandPattern(
                pattern=r'suppuration\s+present\s+on\s+tooth\s+(\w+)\s+(buccal|lingual)\s+(distal|mesial|mid|middle)',
                required_groups=['tooth', 'surface', 'position'],
                completion_rules={
                    'min_required_groups': 3,
                    'validation': {
                        'tooth': lambda x: 1 <= int(x) <= 32,
                        'surface': lambda x: x.lower() in ['buccal', 'lingual'],
                        'position': lambda x: x.lower() in ['distal', 'mesial', 'mid', 'middle'],
                    }
                },
                command_type='suppuration',
                priority=1
            ),
            
            # 5. FURCATION - —Ç—Ä–µ–±—É–µ—Ç class + tooth
            CommandPattern(
                pattern=r'furcation\s+class\s+(\w+)\s+on\s+tooth\s+(\w+)',
                required_groups=['class', 'tooth'],
                completion_rules={
                    'min_required_groups': 2,
                    'validation': {
                        'class': lambda x: 1 <= int(x) <= 3,
                        'tooth': lambda x: 1 <= int(x) <= 32,
                    }
                },
                command_type='furcation',
                priority=1
            ),
            
            # 6. GINGIVAL MARGIN - —Ç—Ä–µ–±—É–µ—Ç tooth + 3 –∑–Ω–∞—á–µ–Ω–∏—è (—Å –∑–Ω–∞–∫–∞–º–∏)
            CommandPattern(
                pattern=r'gingival\s+margin\s+on\s+tooth\s+(\d+)(?:\s+((?:minus\s+\d+|plus\s+\d+|\d+)(?:\s+(?:minus\s+\d+|plus\s+\d+|\d+)){0,2}))?',
                required_groups=['tooth', 'values'],
                completion_rules={
                    'min_required_groups': 2,
                    'custom_validation': 'gingival_margin_values',
                    'validation': {
                        'tooth': lambda x: 1 <= int(x) <= 32,
                    }
                },
                command_type='gingival_margin',
                priority=1
            ),
  
            # 7. MISSING TEETH - –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–ª–æ–≤-—á–∏—Å–µ–ª
            CommandPattern(
                pattern=r'missing\s+teeth?\s+((?:\w+[\s,]*)+)',  # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
                required_groups=['teeth'],
                completion_rules={
                    'min_required_groups': 1,
                    'custom_validation': 'missing_teeth_list_enhanced',
                },
                command_type='missing_teeth',
                priority=1
            ),
        ]

    def _validate_missing_teeth_list_enhanced(self, teeth_text: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑—É–±–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ª–æ–≤"""
        if not teeth_text:
            return False
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–ª–æ–≤ –≤ —á–∏—Å–ª–∞
        word_to_num = {
            'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
            'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
            'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14,
            'fifteen': 15, 'sixteen': 16, 'seventeen': 17, 'eighteen': 18,
            'nineteen': 19, 'twenty': 20, 'twenty-one': 21, 'twenty-two': 22,
            'twenty-three': 23, 'twenty-four': 24, 'twenty-five': 25,
            'twenty-six': 26, 'twenty-seven': 27, 'twenty-eight': 28,
            'twenty-nine': 29, 'thirty': 30, 'thirty-one': 31, 'thirty-two': 32
        }
        
        try:
            teeth = []
            words = teeth_text.lower().strip().split()
            
            for word in words:
                clean_word = word.strip('.,!?;:')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã
                if clean_word.isdigit():
                    tooth_num = int(clean_word)
                    if 1 <= tooth_num <= 32:
                        teeth.append(tooth_num)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞
                elif clean_word in word_to_num:
                    tooth_num = word_to_num[clean_word]
                    if 1 <= tooth_num <= 32:
                        teeth.append(tooth_num)
            
            return len(teeth) > 0
            
        except Exception as e:
            print(f"‚ùå Missing teeth validation error: {e}")
            return False
    
    def analyze_command_completeness(self, text: str, client_id: str) -> Tuple[CommandCompleteness, Optional[Dict]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã - –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
        """
        text_clean = text.lower().strip()
        
        print(f"üîç ANALYZING COMMAND COMPLETENESS: '{text_clean}'")
        
        # –î–û–ë–ê–í–ò–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –°–ù–ê–ß–ê–õ–ê
        partial_patterns = [
            r'probing\s+depth\s+.*?tooth\s+(?:number\s+)?(\d+)\s+.*(buccal|lingual)(?:\s+surface)?$',
            r'tooth\s+(\d+).*?mobility(?:\s+grade)?$',
            r'bleeding\s+on\s+probing\s+tooth\s+(\d+)(?:\s+(buccal|lingual))?$'
        ]
        
        for pattern in partial_patterns:
            if re.search(pattern, text_clean):
                print(f"‚è≥ PARTIAL COMMAND DETECTED")
                return CommandCompleteness.INCOMPLETE, None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern_obj in self.command_patterns:
            match = re.search(pattern_obj.pattern, text_clean, re.IGNORECASE)
            
            if match:
                print(f"‚úÖ PATTERN MATCHED: {pattern_obj.command_type}")
                print(f"üìä GROUPS: {match.groups()}")
                
                completeness, command_data = self._analyze_pattern_completeness(
                    pattern_obj, match, text_clean
                )
                
                print(f"üéØ COMPLETENESS: {completeness.value}")
                
                if completeness == CommandCompleteness.COMPLETE:
                    print(f"üöÄ COMMAND COMPLETE - IMMEDIATE EXECUTION!")
                    return completeness, command_data
                elif completeness == CommandCompleteness.INCOMPLETE:
                    print(f"‚è≥ COMMAND INCOMPLETE - WAITING FOR MORE...")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                    self.partial_commands[client_id] = {
                        'pattern': pattern_obj,
                        'current_text': text_clean,
                        'timestamp': time.time()
                    }
                    return completeness, command_data
        
        print(f"‚ùå NO PATTERN MATCHED")
        return CommandCompleteness.INVALID, None
    
    def _analyze_pattern_completeness(self, pattern_obj: CommandPattern, match, text: str) -> Tuple[CommandCompleteness, Optional[Dict]]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        
        groups = match.groups()
        non_empty_groups = [g for g in groups if g is not None and g.strip()]
        
        print(f"üìã Required groups: {pattern_obj.completion_rules['min_required_groups']}")
        print(f"üìä Found groups: {len(non_empty_groups)} - {non_empty_groups}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
        min_required = pattern_obj.completion_rules['min_required_groups']
        
        if len(non_empty_groups) < min_required:
            print(f"‚è≥ INCOMPLETE: Need {min_required}, got {len(non_empty_groups)}")
            return CommandCompleteness.INCOMPLETE, None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            if not self._validate_command_values(pattern_obj, groups, text):
                print(f"‚ùå INVALID: Validation failed")
                return CommandCompleteness.INVALID, None
        except Exception as e:
            print(f"‚ùå VALIDATION ERROR: {e}")
            return CommandCompleteness.INVALID, None
        
        # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞
        command_data = self._extract_command_data(pattern_obj, groups, text)
        print(f"‚úÖ COMPLETE: Command data extracted")
        
        return CommandCompleteness.COMPLETE, command_data
    
    def _validate_command_values(self, pattern_obj: CommandPattern, groups, text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ª–æ–≤-—á–∏—Å–µ–ª"""
   
        # ‚úÖ –¢–û–¢–ñ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–ª–æ–≤–∞—Ä—å
        word_to_num = {
            'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
            'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
            'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14,
            'fifteen': 15, 'sixteen': 16, 'seventeen': 17, 'eighteen': 18,
            'nineteen': 19, 'twenty': 20, 'twenty-one': 21, 'twenty-two': 22,
            'twenty-three': 23, 'twenty-four': 24, 'twenty-five': 25,
            'twenty-six': 26, 'twenty-seven': 27, 'twenty-eight': 28,
            'twenty-nine': 29, 'thirty': 30, 'thirty-one': 31, 'thirty-two': 32,
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: ASR –æ—à–∏–±–∫–∏
            'too': 2, 'to': 2, 'for': 4, 'ate': 8, 'won': 1, 'tree': 3, 'sex': 6, 'free': 3
        }

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        def safe_convert_to_int(value):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ª–æ–≤–æ –≤ —á–∏—Å–ª–æ"""
            if not value:
                return None
            
            value_clean = str(value).strip().lower()
            
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            value_clean = value_clean.rstrip('.,!?;:')
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã
            if value_clean.isdigit():
                return int(value_clean)
            
            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞-—á–∏—Å–ª–∞ (–≤–∫–ª—é—á–∞—è ASR –æ—à–∏–±–∫–∏)
            if value_clean in word_to_num:
                return word_to_num[value_clean]
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            print(f"‚ö†Ô∏è Warning: Could not convert '{value}' to number")
            return None
       
        completion_rules = pattern_obj.completion_rules
       
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        if 'validation' in completion_rules:
            validation_rules = completion_rules['validation']
            required_groups = pattern_obj.required_groups
           
            for i, group_name in enumerate(required_groups):
                if i < len(groups) and groups[i] is not None:
                    original_value = groups[i].strip()
                   
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                    if group_name in ['tooth', 'depth1', 'depth2', 'depth3', 'grade', 'class']:
                        converted_value = safe_convert_to_int(original_value)
                        if converted_value is None:
                            print(f"‚ùå Failed to convert '{original_value}' to number for {group_name}")
                            return False
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                        validation_value = converted_value
                    else:
                        validation_value = original_value
                   
                    if group_name in validation_rules:
                        try:
                            if not validation_rules[group_name](validation_value):
                                print(f"‚ùå Validation failed for {group_name}: {validation_value}")
                                return False
                        except Exception as e:
                            print(f"‚ùå Validation error for {group_name}: {e}")
                            return False
       
        # –ö–∞—Å—Ç–æ–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if 'custom_validation' in completion_rules:
            custom_type = completion_rules['custom_validation']
           
            if custom_type == 'gingival_margin_values':
                return self._validate_gingival_margin_values(groups[1] if len(groups) > 1 else None)
            elif custom_type == 'missing_teeth_list':
                return self._validate_missing_teeth_list(groups[0] if len(groups) > 0 else None)
       
        return True
    
    def _validate_gingival_margin_values(self, values_text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π gingival margin"""
        if not values_text:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å 3 –∑–Ω–∞—á–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º –∑–Ω–∞–∫–æ–≤)
        values = self._parse_gingival_margin_values(values_text)
        return len(values) == 3
    
    def _parse_gingival_margin_values(self, text: str) -> List[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π gingival margin"""
        values = []
        parts = text.strip().split()
        
        i = 0
        while i < len(parts) and len(values) < 3:
            if parts[i] == 'minus' and i + 1 < len(parts):
                try:
                    values.append(-int(parts[i + 1]))
                    i += 2
                except:
                    i += 1
            elif parts[i] == 'plus' and i + 1 < len(parts):
                try:
                    values.append(int(parts[i + 1]))
                    i += 2
                except:
                    i += 1
            else:
                try:
                    values.append(int(parts[i]))
                    i += 1
                except:
                    i += 1
        
        return values
    
    def _validate_missing_teeth_list(self, teeth_text: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑—É–±–æ–≤"""
        if not teeth_text:
            return False
            
        try:
            teeth = [int(x.strip()) for x in teeth_text.split() if x.strip().isdigit()]
            return len(teeth) > 0 and all(1 <= t <= 32 for t in teeth)
        except:
            return False
    
    def _extract_command_data(self, pattern_obj: CommandPattern, groups, text: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ª–æ–≤-—á–∏—Å–µ–ª"""
        
        word_to_num = {
            'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
            'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
            'eleven': 11, 'twelve': 12, 'thirteen': 13, 'fourteen': 14,
            'fifteen': 15, 'sixteen': 16, 'seventeen': 17, 'eighteen': 18,
            'nineteen': 19, 'twenty': 20, 'twenty-one': 21, 'twenty-two': 22,
            'twenty-three': 23, 'twenty-four': 24, 'twenty-five': 25,
            'twenty-six': 26, 'twenty-seven': 27, 'twenty-eight': 28,
            'twenty-nine': 29, 'thirty': 30, 'thirty-one': 31, 'thirty-two': 32,
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: ASR –æ—à–∏–±–∫–∏
            'too': 2,    # "too" —á–∞—Å—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ "two"
            'to': 2,     # "to" —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å "two"
            'for': 4,    # "for" —á–∞—Å—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ "four"
            'ate': 8,    # "ate" –º–æ–∂–µ—Ç –±—ã—Ç—å "eight"
            'won': 1,    # "won" –º–æ–∂–µ—Ç –±—ã—Ç—å "one"
            'tree': 3,   # "tree" –º–æ–∂–µ—Ç –±—ã—Ç—å "three"
            'sex': 6,    # "sex" –º–æ–∂–µ—Ç –±—ã—Ç—å "six"
            'free': 3,   # "free" –º–æ–∂–µ—Ç –±—ã—Ç—å "three"
        }
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        def safe_convert_to_int(value):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ª–æ–≤–æ –≤ —á–∏—Å–ª–æ"""
            if not value:
                return 0
            
            value_clean = str(value).strip().lower()
            
            # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            value_clean = value_clean.rstrip('.,!?;:')
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã
            if value_clean.isdigit():
                return int(value_clean)
            
            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞-—á–∏—Å–ª–∞ (–≤–∫–ª—é—á–∞—è ASR –æ—à–∏–±–∫–∏)
            if value_clean in word_to_num:
                converted = word_to_num[value_clean]
                print(f"‚úÖ Converted '{value}' ‚Üí {converted}")
                return converted
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            print(f"‚ö†Ô∏è Warning: Could not convert '{value}' to number, using 0")
            return 0
        
        command_data = {
            'type': pattern_obj.command_type,
            'raw_text': text,
            'timestamp': time.time()
        }
        
        if pattern_obj.command_type == 'probing_depth':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            tooth_num = safe_convert_to_int(groups[0]) if len(groups) > 0 else 0
            surface = groups[1].lower() if len(groups) > 1 else 'buccal'
            depth1 = safe_convert_to_int(groups[2]) if len(groups) > 2 else 0
            depth2 = safe_convert_to_int(groups[3]) if len(groups) > 3 else 0
            depth3 = safe_convert_to_int(groups[4]) if len(groups) > 4 else 0
            
            command_data.update({
                'tooth': tooth_num,
                'surface': surface,
                'values': [depth1, depth2, depth3]
            })
            
            print(f"‚úÖ Probing depth extracted: tooth={tooth_num}, surface={surface}, values=[{depth1}, {depth2}, {depth3}]")
            
        elif pattern_obj.command_type == 'mobility':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è mobility
            tooth_num = safe_convert_to_int(groups[0]) if len(groups) > 0 else 0
            grade = safe_convert_to_int(groups[1]) if len(groups) > 1 else 0
            
            command_data.update({
                'tooth': tooth_num,
                'grade': grade
            })
            
            print(f"‚úÖ Mobility extracted: tooth={tooth_num}, grade={grade}")
            
        elif pattern_obj.command_type == 'bleeding_on_probing':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è bleeding
            tooth_num = safe_convert_to_int(groups[0]) if len(groups) > 0 else 0
            surface = groups[1].lower() if len(groups) > 1 else 'buccal'
            position = groups[2].lower() if len(groups) > 2 else 'distal'
            
            command_data.update({
                'tooth': tooth_num,
                'surface': surface,
                'position': position
            })
            
            print(f"‚úÖ Bleeding extracted: tooth={tooth_num}, surface={surface}, position={position}")
            
        elif pattern_obj.command_type == 'suppuration':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è suppuration
            tooth_num = safe_convert_to_int(groups[0]) if len(groups) > 0 else 0
            surface = groups[1].lower() if len(groups) > 1 else 'buccal'
            position = groups[2].lower() if len(groups) > 2 else 'distal'
            
            command_data.update({
                'tooth': tooth_num,
                'surface': surface,
                'position': position
            })
            
        elif pattern_obj.command_type == 'furcation':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è furcation
            furcation_class = safe_convert_to_int(groups[0]) if len(groups) > 0 else 0
            tooth_num = safe_convert_to_int(groups[1]) if len(groups) > 1 else 0
            
            command_data.update({
                'class': furcation_class,
                'tooth': tooth_num
            })
            
        elif pattern_obj.command_type == 'gingival_margin':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è gingival margin (–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π —Å–æ –∑–Ω–∞–∫–∞–º–∏)
            tooth_num = safe_convert_to_int(groups[0]) if len(groups) > 0 else 0
            values = self._parse_gingival_margin_values(groups[1]) if len(groups) > 1 and groups[1] else []
            
            command_data.update({
                'tooth': tooth_num,
                'values': values
            })
            
        elif pattern_obj.command_type == 'missing_teeth':
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è missing teeth
            if len(groups) > 0 and groups[0]:
                # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∑—É–±–æ–≤
                teeth_text = groups[0]
                teeth = []
                for word in teeth_text.split():
                    tooth_num = safe_convert_to_int(word)
                    if tooth_num is not None and 1 <= tooth_num <= 32: 
                        teeth.append(tooth_num)
                
                command_data.update({
                    'teeth': teeth
                })
            else:
                command_data.update({
                    'teeth': []
                })
        
        return command_data

class InstantCommandProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, web_clients_ref):
        self.analyzer = InstantCommandAnalyzer()
        self.web_clients = web_clients_ref
        
    async def process_instant_command(self, client_id: str, text: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        """
        
        completeness, command_data = self.analyzer.analyze_command_completeness(text, client_id)
        
        if completeness == CommandCompleteness.COMPLETE:
            print(f"üöÄ INSTANT EXECUTION for client {client_id}")
            print(f"üìã Command data: {command_data}")
            
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await self._send_instant_result(client_id, command_data)
            return True
            
        elif completeness == CommandCompleteness.INCOMPLETE:
            print(f"‚è≥ WAITING FOR COMPLETION for client {client_id}")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            await self._send_partial_feedback(client_id, text)
            return False
            
        return False
    
    async def _send_instant_result(self, client_id: str, command_data: Dict):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º periodontal_update —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_periodontal_message(client_id, command_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞–º
        if self.web_clients:
            message_json = json.dumps(message)
            disconnected = set()
            
            for client in list(self.web_clients):
                try:
                    await asyncio.wait_for(client.send(message_json), timeout=1.0)
                    print(f"‚úÖ INSTANT RESULT sent to web client")
                except:
                    disconnected.add(client)
            
            for client in disconnected:
                self.web_clients.discard(client)
    
    def _format_periodontal_message(self, client_id: str, command_data: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è periodontal chart"""
        
        base_message = {
            "type": "periodontal_update",
            "client_id": client_id,
            "success": True,
            "timestamp": command_data['timestamp'],
            "instant_execution": True,
            "system": "instant_command_completion_v1"
        }
        
        if command_data['type'] == 'probing_depth':
            base_message.update({
                "tooth_number": command_data['tooth'],
                "measurement_type": "probing_depth",
                "surface": command_data['surface'],
                "values": command_data['values'],
                "measurements": {"probing_depth": command_data['values']},
                "message": f"‚úÖ Probing depths tooth {command_data['tooth']} {command_data['surface']}: {'-'.join(map(str, command_data['values']))}mm"
            })
            
        elif command_data['type'] == 'mobility':
            base_message.update({
                "tooth_number": command_data['tooth'],
                "measurement_type": "mobility",
                "values": [command_data['grade']],
                "measurements": {"mobility": command_data['grade']},
                "message": f"‚úÖ Tooth {command_data['tooth']} mobility: Grade {command_data['grade']}"
            })
            
        elif command_data['type'] == 'bleeding_on_probing':
            base_message.update({
                "tooth_number": command_data['tooth'],
                "measurement_type": "bleeding",
                "surface": command_data['surface'],
                "position": command_data['position'],
                "values": [True],
                "measurements": {"bleeding": [True]},
                "message": f"‚úÖ Bleeding on probing tooth {command_data['tooth']} {command_data['surface']} {command_data['position']}"
            })
            
        elif command_data['type'] == 'suppuration':
            base_message.update({
                "tooth_number": command_data['tooth'],
                "measurement_type": "suppuration",
                "surface": command_data['surface'],
                "position": command_data['position'],
                "values": [True],
                "measurements": {"suppuration": [True]},
                "message": f"‚úÖ Suppuration tooth {command_data['tooth']} {command_data['surface']} {command_data['position']}"
            })
            
        elif command_data['type'] == 'furcation':
            base_message.update({
                "tooth_number": command_data['tooth'],
                "measurement_type": "furcation",
                "values": [command_data['class']],
                "measurements": {"furcation": command_data['class']},
                "message": f"‚úÖ Tooth {command_data['tooth']} furcation: Class {command_data['class']}"
            })
            
        elif command_data['type'] == 'gingival_margin':
            base_message.update({
                "tooth_number": command_data['tooth'],
                "measurement_type": "gingival_margin",
                "values": command_data['values'],
                "measurements": {"gingival_margin": command_data['values']},
                "message": f"‚úÖ Gingival margin tooth {command_data['tooth']}: {' '.join(map(str, command_data['values']))}mm"
            })
            
        elif command_data['type'] == 'missing_teeth':
            # –î–ª—è missing teeth –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑—É–±–∞
            # –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –∑—É–±, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            tooth = command_data['teeth'][0] if command_data['teeth'] else 1
            base_message.update({
                "tooth_number": tooth,
                "measurement_type": "missing_teeth",
                "values": command_data['teeth'],
                "measurements": {"missing_teeth": command_data['teeth']},
                "message": f"‚úÖ Missing teeth: {', '.join(map(str, command_data['teeth']))}"
            })
        
        return base_message
    
    async def _send_partial_feedback(self, client_id: str, partial_text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if self.web_clients:
            feedback_message = {
                "type": "partial_command_feedback",
                "client_id": client_id,
                "partial_text": partial_text,
                "status": "waiting_for_completion",
                "timestamp": time.time()
            }
            
            message_json = json.dumps(feedback_message)
            disconnected = set()
            
            for client in list(self.web_clients):
                try:
                    await asyncio.wait_for(client.send(message_json), timeout=1.0)
                except:
                    disconnected.add(client)
            
            for client in disconnected:
                self.web_clients.discard(client)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
def integrate_instant_command_system(base_processor, web_clients_ref):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    
    instant_processor = InstantCommandProcessor(web_clients_ref)
    
    # –î–æ–±–∞–≤–ª—è–µ–º instant processor –∫ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É
    base_processor.instant_processor = instant_processor
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤
    original_process_chunk = base_processor.process_audio_chunk
    
    def enhanced_process_chunk(client_id, audio_chunk):
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        result = original_process_chunk(client_id, audio_chunk)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if result and isinstance(result, str) and result.strip():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            asyncio.create_task(
                instant_processor.process_instant_command(client_id, result)
            )
        
        return result
    
    base_processor.process_audio_chunk = enhanced_process_chunk
    
    print("üöÄ INSTANT COMMAND SYSTEM INTEGRATED")
    return base_processor

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    import asyncio
    
    async def test_instant_commands():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        print("üß™ Testing Instant Command Completion System")
        print("=" * 60)
        
        analyzer = InstantCommandAnalyzer()
        
        test_commands = [
            # –ü–æ–ª–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
            ("probing depth on tooth number 14 buccal surface 3 2 4", CommandCompleteness.COMPLETE),
            ("tooth 8 has mobility grade 2", CommandCompleteness.COMPLETE),
            ("bleeding on probing tooth 12 buccal distal", CommandCompleteness.COMPLETE),
            ("suppuration present on tooth 8 lingual mesial", CommandCompleteness.COMPLETE),
            ("furcation class 2 on tooth 6", CommandCompleteness.COMPLETE),
            ("gingival margin on tooth 14 minus 1 0 plus 1", CommandCompleteness.COMPLETE),
            ("missing teeth 1 16 17 32", CommandCompleteness.COMPLETE),
            
            # –ù–µ–ø–æ–ª–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–æ–ª–∂–Ω—ã –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
            ("probing depth on tooth number 14 buccal surface", CommandCompleteness.INCOMPLETE),
            ("tooth 8 has mobility", CommandCompleteness.INCOMPLETE),
            ("bleeding on probing tooth 12", CommandCompleteness.INCOMPLETE),
            ("suppuration present on tooth 8", CommandCompleteness.INCOMPLETE),
            ("gingival margin on tooth 14", CommandCompleteness.INCOMPLETE),
        ]
        
        for i, (command, expected) in enumerate(test_commands, 1):
            print(f"\n{i}. Testing: '{command}'")
            print("-" * 40)
            
            completeness, command_data = analyzer.analyze_command_completeness(command, "test_client")
            
            status = "‚úÖ PASS" if completeness == expected else "‚ùå FAIL"
            print(f"   Expected: {expected.value}")
            print(f"   Got: {completeness.value}")
            print(f"   Result: {status}")
            
            if command_data:
                print(f"   Data: {command_data}")
        
        print(f"\nüéØ Test completed!")
    
    asyncio.run(test_instant_commands())
