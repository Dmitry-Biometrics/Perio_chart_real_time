"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FastWhisper Client —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∞—É–¥–∏–æ –∏ –ø–∞–¥–µ–Ω–∏—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
–ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° WEBSOCKETS HEADERS
"""

import asyncio
import websockets
import sounddevice as sd
import numpy as np
import threading
import queue
import logging
import time
import json
from datetime import datetime
import signal
import sys
import inspect

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class StableFastWhisperClient:
    def __init__(self, server_uri="ws://3.84.215.173:8765"):
        self.server_uri = server_uri
        self.websocket = None
        
        # –°–¢–ê–ë–ò–õ–¨–ù–´–ï Audio –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)
        self.sample_rate = 16000
        self.channels = 1
        # –£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.chunk_duration = 0.25  # 250ms (–±—ã–ª–æ 125ms) - –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
        self.chunk_size = int(self.sample_rate * self.chunk_duration)  # 4000 samples
        
        # –°–¢–ê–ë–ò–õ–¨–ù–´–ï –±—É—Ñ–µ—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
        self.audio_queue = queue.Queue(maxsize=60)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
        self.result_queue = queue.Queue()
        self.is_recording = False
        self.is_connected = False
        self.should_run = True
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫
        self.error_count = 0
        self.max_errors = 10
        self.reconnect_delay = 1.0
        self.last_error_time = 0
        
        # WebSockets —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        self.headers_param = self._detect_headers_param()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
        self.stats = {
            'chunks_sent': 0,
            'results_received': 0,
            'connection_errors': 0,
            'audio_errors': 0,
            'processing_errors': 0,
            'session_start': None,
            'total_audio_sent': 0.0,
            'successful_chunks': 0,
            'failed_chunks': 0,
            'average_chunk_size': 0,
            'last_successful_send': None
        }
        
        self.results_history = []
        self.max_history = 50
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        logger.info(f"üõ°Ô∏è STABLE FastWhisper client initialized")
        logger.info(f"üì° Server: {self.server_uri}")
        logger.info(f"üîß STABLE MODE: {self.chunk_duration}s chunks ({self.chunk_size} samples)")
        logger.info(f"üåê WebSocket headers: {self.headers_param}")
    
    def _detect_headers_param(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è headers"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API
            try:
                from websockets.asyncio.client import connect
                sig = inspect.signature(connect)
                if 'additional_headers' in sig.parameters:
                    logger.info("üÜï –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π API —Å additional_headers")
                    return 'additional_headers'
                elif 'extra_headers' in sig.parameters:
                    logger.info("üîÑ –ù–æ–≤—ã–π API —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π extra_headers")
                    return 'extra_headers'
                else:
                    logger.warning("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä headers –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤–æ–º API")
                    return None
                    
            except ImportError:
                # Fallback –∫ legacy API
                from websockets.client import connect
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy API —Å extra_headers")
                return 'extra_headers'
                
        except ImportError:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å websockets")
            return None
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üõë Received signal {signum}, shutting down gracefully...")
        self.should_run = False
    
    def list_audio_devices(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            devices = sd.query_devices()
            print("\nüé§ Available audio devices:")
            print("=" * 60)
            
            for i, device in enumerate(devices):
                if device['max_input_channels'] > 0:
                    default_marker = " ‚≠ê (default)" if i == sd.default.device[0] else ""
                    status = "‚úÖ" if self.is_device_compatible(device) else "‚ö†Ô∏è"
                    
                    print(f"  {i:2d}: {status} {device['name']}{default_marker}")
                    print(f"      üìä Channels: {device['max_input_channels']}")
                    print(f"      üîä Sample rate: {device['default_samplerate']:.0f}Hz")
                    print(f"      üíª API: {device['hostapi']}")
                    print()
            
            return devices
            
        except Exception as e:
            logger.error(f"Error retrieving devices: {e}")
            return []
    
    def is_device_compatible(self, device):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if device['max_input_channels'] < 1:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            compatible_rates = [16000, 44100, 48000]
            device_rate = device['default_samplerate']
            
            return any(abs(device_rate - rate) < 100 for rate in compatible_rates)
            
        except:
            return False
    
    def audio_callback(self, indata, frames, time_info, status):
        """–°–¢–ê–ë–ò–õ–¨–ù–´–ô audio callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if status:
                if status.input_underflow:
                    logger.debug("‚ö†Ô∏è Audio input underflow")
                if status.input_overflow:
                    self.stats['audio_errors'] += 1
                    if self.stats['audio_errors'] % 50 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 50-—é –æ—à–∏–±–∫—É
                        logger.warning(f"‚ö†Ô∏è Audio overflows: {self.stats['audio_errors']}")
            
            if not self.is_recording or not self.should_run:
                return
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            try:
                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –º–æ–Ω–æ
                if len(indata.shape) == 2:
                    audio_data = indata[:, 0].copy()
                else:
                    audio_data = indata.copy()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                if len(audio_data) == 0:
                    return
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                if len(audio_data) != self.chunk_size:
                    if len(audio_data) > self.chunk_size:
                        # –û–±—Ä–µ–∑–∞–µ–º
                        audio_data = audio_data[:self.chunk_size]
                    else:
                        # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                        padding = np.zeros(self.chunk_size - len(audio_data))
                        audio_data = np.concatenate([audio_data, padding])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∏ inf
                if np.any(np.isnan(audio_data)) or np.any(np.isinf(audio_data)):
                    logger.warning("‚ö†Ô∏è Invalid audio data (NaN/inf), skipping chunk")
                    return
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                audio_data = np.clip(audio_data, -1.0, 1.0)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int16
                audio_int16 = (audio_data * 32767).astype(np.int16)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                chunk_time = time.time()
                try:
                    self.audio_queue.put_nowait((audio_int16, chunk_time))
                    self.stats['total_audio_sent'] += self.chunk_duration
                except queue.Full:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞–Ω–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ—Ç–µ—Ä–∏ –Ω–æ–≤—ã—Ö
                    try:
                        discarded_chunk, _ = self.audio_queue.get_nowait()
                        self.audio_queue.put_nowait((audio_int16, chunk_time))
                        self.stats['failed_chunks'] += 1
                    except queue.Empty:
                        pass
                        
            except Exception as e:
                self.stats['audio_errors'] += 1
                if self.stats['audio_errors'] % 10 == 0:
                    logger.error(f"‚ùå Audio processing error (#{self.stats['audio_errors']}): {e}")
                
        except Exception as e:
            logger.error(f"‚ùå Critical audio callback error: {e}")
            self.error_count += 1
    
    def setup_audio_stream(self, device_index=None):
        """–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            if device_index is not None:
                try:
                    device_info = sd.query_devices(device_index)
                    logger.info(f"üé§ Selected device: {device_info['name']}")
                    
                    if not self.is_device_compatible(device_info):
                        logger.warning(f"‚ö†Ô∏è Device may not be fully compatible")
                    
                except Exception as e:
                    logger.error(f"‚ùå Invalid device index {device_index}: {e}")
                    device_index = None
            
            # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ—Ç –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π –∫ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π)
            configs_to_try = [
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
                {
                    'device': device_index,
                    'channels': self.channels,
                    'samplerate': self.sample_rate,
                    'blocksize': self.chunk_size,
                    'dtype': 'float32',
                    'latency': 'high',  # –í—ã—Å–æ–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    'name': 'Conservative/Stable'
                },
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –£–º–µ—Ä–µ–Ω–Ω–∞—è
                {
                    'device': device_index,
                    'channels': self.channels,
                    'samplerate': self.sample_rate,
                    'blocksize': self.chunk_size,
                    'dtype': 'float32',
                    'latency': None,
                    'name': 'Moderate'
                },
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
                {
                    'device': device_index,
                    'channels': self.channels,
                    'samplerate': self.sample_rate,
                    'blocksize': None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä
                    'dtype': 'float32',
                    'latency': None,
                    'name': 'Auto blocksize'
                },
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4: –ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                {
                    'device': device_index,
                    'channels': self.channels,
                    'samplerate': None,  # –ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    'blocksize': None,
                    'dtype': 'float32',
                    'latency': None,
                    'name': 'Device defaults'
                }
            ]
            
            for i, config in enumerate(configs_to_try):
                try:
                    logger.info(f"üîÑ Trying audio config {i+1}/{len(configs_to_try)}: {config['name']}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    actual_samplerate = config['samplerate']
                    if actual_samplerate is None and device_index is not None:
                        device_info = sd.query_devices(device_index)
                        actual_samplerate = int(device_info['default_samplerate'])
                    elif actual_samplerate is None:
                        actual_samplerate = self.sample_rate
                    
                    self.stream = sd.InputStream(
                        device=config['device'],
                        channels=config['channels'],
                        samplerate=actual_samplerate,
                        blocksize=config['blocksize'],
                        dtype=config['dtype'],
                        callback=self.audio_callback,
                        latency=config['latency']
                    )
                    
                    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
                    self.stream.start()
                    time.sleep(0.1)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç
                    self.stream.stop()
                    
                    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                    actual_blocksize = config['blocksize'] or self.chunk_size
                    
                    logger.info(f"‚úÖ STABLE audio stream configured ({config['name']}):")
                    logger.info(f"   üìä Sample rate: {actual_samplerate}Hz")
                    logger.info(f"   üì¶ Block size: {actual_blocksize} samples")
                    logger.info(f"   ‚è±Ô∏è Latency: {self.stream.latency}")
                    logger.info(f"   üîß Device: {device_index if device_index is not None else 'default'}")
                    
                    return True
                    
                except Exception as config_error:
                    logger.warning(f"‚ö†Ô∏è Config {i+1} failed: {config_error}")
                    if hasattr(self, 'stream'):
                        try:
                            self.stream.close()
                        except:
                            pass
                    continue
            
            # –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            raise Exception("All audio configurations failed")
            
        except Exception as e:
            logger.error(f"‚ùå Audio setup error: {e}")
            logger.error("üí° Suggestions:")
            logger.error("   1. Try a different audio device")
            logger.error("   2. Check audio drivers")
            logger.error("   3. Close other audio applications")
            logger.error("   4. Run with administrator privileges")
            return False
    
    async def connect_to_server(self):
        """–°–¢–ê–ë–ò–õ–¨–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é headers"""
        max_retries = 15
        base_delay = 1.0
        
        for attempt in range(max_retries):
            try:
                current_delay = min(base_delay * (1.5 ** attempt), 10.0)
                logger.info(f"üîó Connection attempt {attempt + 1}/{max_retries}")
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                connect_params = {
                    'ping_interval': 20,     # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    'ping_timeout': 10,     # –£–≤–µ–ª–∏—á–µ–Ω–æ
                    'close_timeout': 5,     # –£–≤–µ–ª–∏—á–µ–Ω–æ
                    'max_size': 10*1024*1024,  # –ë–æ–ª—å—à–∏–π –±—É—Ñ–µ—Ä
                    'compression': None,    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∂–∞—Ç–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                if self.headers_param:
                    headers = {'User-Agent': 'StableFastWhisperClient/1.0'}
                    connect_params[self.headers_param] = headers
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é connect
                try:
                    from websockets.asyncio.client import connect
                except ImportError:
                    from websockets.client import connect
                
                self.websocket = await connect(self.server_uri, **connect_params)
                
                self.is_connected = True
                self.stats['session_start'] = datetime.now()
                self.error_count = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    await asyncio.wait_for(self.websocket.send("PING"), timeout=5.0)
                    response = await asyncio.wait_for(self.websocket.recv(), timeout=5.0)
                    
                    if response == "PONG":
                        logger.info(f"‚úÖ STABLE connection established")
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
                        try:
                            await self.websocket.send("MODEL_INFO")
                            model_info = await asyncio.wait_for(self.websocket.recv(), timeout=3.0)
                            model_data = json.loads(model_info)
                            logger.info(f"ü§ñ Server model: {model_data.get('model_size', 'unknown')}")
                            logger.info(f"üíª Server device: {model_data.get('device', 'unknown')}")
                        except:
                            pass
                        
                        return True
                    
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è Server response timeout")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Server check failed: {e}")
                
                # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å—Ç—å
                logger.info(f"‚úÖ Connection established (server check failed)")
                return True
                
            except Exception as e:
                self.stats['connection_errors'] += 1
                logger.error(f"‚ùå Connection error (attempt {attempt + 1}): {e}")
                
                if attempt < max_retries - 1:
                    logger.info(f"‚è≥ Retrying in {current_delay:.1f}s...")
                    await asyncio.sleep(current_delay)
        
        logger.error(f"‚ùå Failed to connect after {max_retries} attempts")
        return False
    
    async def audio_sender(self):
        """–°–¢–ê–ë–ò–õ–¨–ù–´–ô –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞—É–¥–∏–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        logger.info("üì§ STABLE audio sender started")
        send_count = 0
        consecutive_errors = 0
        max_consecutive_errors = 5
        
        while self.should_run:
            if not self.is_connected:
                await asyncio.sleep(0.1)
                continue
            
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    audio_chunk, chunk_time = self.audio_queue.get(timeout=0.5)
                except queue.Empty:
                    continue
                
                if not self.is_connected or not self.websocket:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket
                if self.websocket.closed:
                    logger.warning("üîó WebSocket closed during sending")
                    self.is_connected = False
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
                try:
                    await asyncio.wait_for(
                        self.websocket.send(audio_chunk.tobytes()), 
                        timeout=2.0
                    )
                    
                    send_count += 1
                    self.stats['chunks_sent'] = send_count
                    self.stats['successful_chunks'] += 1
                    self.stats['last_successful_send'] = time.time()
                    consecutive_errors = 0
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–æ–≤
                    chunk_size_bytes = len(audio_chunk.tobytes())
                    if self.stats['average_chunk_size'] == 0:
                        self.stats['average_chunk_size'] = chunk_size_bytes
                    else:
                        alpha = 0.1
                        self.stats['average_chunk_size'] = (
                            alpha * chunk_size_bytes + 
                            (1 - alpha) * self.stats['average_chunk_size']
                        )
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    if send_count % 20 == 0:  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        logger.debug(f"üîß STABLE: {send_count} chunks sent "
                                   f"({self.stats['total_audio_sent']:.1f}s audio)")
                
                except asyncio.TimeoutError:
                    logger.warning("‚ö†Ô∏è Audio send timeout")
                    consecutive_errors += 1
                    self.stats['failed_chunks'] += 1
                except websockets.exceptions.ConnectionClosed:
                    logger.warning("üîó Connection closed during sending")
                    self.is_connected = False
                    consecutive_errors = 0
                except Exception as e:
                    logger.error(f"‚ùå Audio send error: {e}")
                    consecutive_errors += 1
                    self.stats['failed_chunks'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if consecutive_errors >= max_consecutive_errors:
                    logger.error(f"‚ùå Too many consecutive send errors ({consecutive_errors}), disconnecting")
                    self.is_connected = False
                    consecutive_errors = 0
                
            except Exception as e:
                self.stats['processing_errors'] += 1
                logger.error(f"‚ùå Audio sender critical error: {e}")
                await asyncio.sleep(0.1)
    
    async def result_receiver(self):
        """–°–¢–ê–ë–ò–õ–¨–ù–´–ô –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("üì• STABLE result receiver started")
        
        while self.should_run:
            if not self.is_connected:
                await asyncio.sleep(0.1)
                continue
            
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    result = await asyncio.wait_for(self.websocket.recv(), timeout=1.0)
                    result_time = time.time()
                    receive_timestamp = datetime.now()
                except asyncio.TimeoutError:
                    continue
                
                if result and result not in ["NO_SPEECH", "PROCESSING", "SERVER_NOT_READY"]:
                    self.stats['results_received'] += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    result_entry = {
                        'timestamp': receive_timestamp.isoformat(),
                        'text': result,
                        'sequence': self.stats['results_received']
                    }
                    self.results_history.append(result_entry)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                    if len(self.results_history) > self.max_history:
                        self.results_history = self.results_history[-self.max_history:]
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    self.display_result(result, receive_timestamp)
                    
                elif result == "NO_SPEECH":
                    logger.debug("üîá Server: no speech detected")
                elif result == "SERVER_NOT_READY":
                    logger.warning("‚ö†Ô∏è Server not ready")
                elif result == "PONG":
                    logger.debug("üèì Server pong received")
                    
            except websockets.exceptions.ConnectionClosed:
                logger.warning("üîó Connection closed during receiving")
                self.is_connected = False
            except Exception as e:
                logger.error(f"‚ùå Result receiving error: {e}")
                self.stats['processing_errors'] += 1
                await asyncio.sleep(0.1)
    
    def display_result(self, result, timestamp):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        print(f"\n{'üõ°Ô∏è' * 60}")
        print(f"   STABLE FASTWHISPER RESULT #{self.stats['results_received']}")
        print(f"{'üõ°Ô∏è' * 60}")
        print(f"üìù Text: '{result.upper()}'")
        print(f"‚è∞ Time: {timestamp.strftime('%H:%M:%S.%f')[:-3]}")
        
        print(f"üìä Statistics:")
        print(f"   üì§ Chunks sent: {self.stats['chunks_sent']}")
        print(f"   ‚úÖ Successful: {self.stats['successful_chunks']}")
        print(f"   ‚ùå Failed: {self.stats['failed_chunks']}")
        print(f"   üì• Results received: {self.stats['results_received']}")
        print(f"   üéµ Total audio: {self.stats['total_audio_sent']:.1f}s")
        
        if self.stats['failed_chunks'] > 0:
            success_rate = (self.stats['successful_chunks'] / 
                          (self.stats['successful_chunks'] + self.stats['failed_chunks'])) * 100
            print(f"   üìà Success rate: {success_rate:.1f}%")
        
        error_count = (self.stats['connection_errors'] + 
                      self.stats['audio_errors'] + 
                      self.stats['processing_errors'])
        if error_count > 0:
            print(f"   ‚ö†Ô∏è Total errors: {error_count}")
        
        print(f"{'üõ°Ô∏è' * 60}\n")
    
    async def connection_monitor(self):
        """–°–¢–ê–ë–ò–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.should_run:
            if not self.is_connected:
                logger.info("üîÑ Reconnecting...")
                if await self.connect_to_server():
                    logger.info("‚úÖ Reconnection successful")
                else:
                    logger.error("‚ùå Reconnection failed, retrying in 3s")
                    await asyncio.sleep(3)
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                try:
                    if self.websocket and self.websocket.closed:
                        logger.warning("üîó Connection was closed")
                        self.is_connected = False
                    else:
                        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
                        await asyncio.sleep(15)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
                        if self.websocket and not self.websocket.closed:
                            try:
                                await asyncio.wait_for(self.websocket.send("PING"), timeout=5.0)
                            except:
                                logger.warning("üîó Ping failed, connection may be lost")
                                self.is_connected = False
                except Exception as e:
                    logger.error(f"‚ùå Connection monitor error: {e}")
                    self.is_connected = False
    
    async def stats_reporter(self):
        """–°–¢–ê–ë–ò–õ–¨–ù–´–ô —Ä–µ–ø–æ—Ä—Ç–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.should_run:
            await asyncio.sleep(60)  # –û—Ç—á–µ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            if self.is_connected and self.stats['session_start']:
                session_duration = (datetime.now() - self.stats['session_start']).total_seconds()
                
                logger.info(f"üìä STABLE MODE - Session: {session_duration/60:.1f}min")
                logger.info(f"   üì§ Sent: {self.stats['chunks_sent']} chunks")
                logger.info(f"   ‚úÖ Success: {self.stats['successful_chunks']}")
                logger.info(f"   ‚ùå Failed: {self.stats['failed_chunks']}")
                logger.info(f"   üì• Received: {self.stats['results_received']} results")
                logger.info(f"   üéµ Audio: {self.stats['total_audio_sent']:.0f}s")
                
                if self.stats['failed_chunks'] > 0:
                    success_rate = (self.stats['successful_chunks'] / 
                                  (self.stats['successful_chunks'] + self.stats['failed_chunks'])) * 100
                    logger.info(f"   üìà Success rate: {success_rate:.1f}%")
                
                error_count = (self.stats['connection_errors'] + 
                              self.stats['audio_errors'] + 
                              self.stats['processing_errors'])
                if error_count > 0:
                    logger.info(f"   ‚ö†Ô∏è Errors: {error_count}")
                
                # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                try:
                    await asyncio.wait_for(self.websocket.send("STATS"), timeout=3.0)
                    server_stats = await asyncio.wait_for(self.websocket.recv(), timeout=5.0)
                    stats_data = json.loads(server_stats)
                    
                    logger.info(f"üñ•Ô∏è Server stats:")
                    logger.info(f"   ü§ñ Whisper calls: {stats_data.get('whisper_calls', 0)}")
                    logger.info(f"   ‚ö° Average RTF: {stats_data.get('average_rtf', 0):.3f}")
                    
                    if stats_data.get('llm_successful_commands', 0) > 0:
                        logger.info(f"   üß† LLM commands: {stats_data.get('llm_successful_commands', 0)}")
                    
                except Exception as e:
                    logger.debug(f"Could not get server stats: {e}")
    
    def save_session_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ —Å–µ—Å—Å–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            if not self.stats['session_start']:
                return
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            log_file = f"stable_fastwhisper_session_{timestamp}.json"
            
            session_data = {
                'session_info': {
                    'start_time': self.stats['session_start'].isoformat(),
                    'end_time': datetime.now().isoformat(),
                    'duration_seconds': (datetime.now() - self.stats['session_start']).total_seconds(),
                    'mode': 'STABLE',
                    'client_version': 'StableFastWhisperClient/1.0'
                },
                'statistics': self.stats,
                'results_history': self.results_history,
                'server_uri': self.server_uri,
                'audio_config': {
                    'sample_rate': self.sample_rate,
                    'chunk_duration': self.chunk_duration,
                    'chunk_size': self.chunk_size,
                    'buffer_size': self.audio_queue.maxsize,
                    'optimization': 'STABILITY_FIRST'
                },
                'error_analysis': {
                    'total_errors': (self.stats['connection_errors'] + 
                                   self.stats['audio_errors'] + 
                                   self.stats['processing_errors']),
                    'error_rate': self.calculate_error_rate(),
                    'success_rate': self.calculate_success_rate()
                }
            }
            
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üíæ STABLE session log saved: {log_file}")
            
        except Exception as e:
            logger.error(f"Error saving log: {e}")
    
    def calculate_error_rate(self):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—à–∏–±–æ–∫"""
        total_operations = self.stats['chunks_sent'] + self.stats['results_received']
        total_errors = (self.stats['connection_errors'] + 
                       self.stats['audio_errors'] + 
                       self.stats['processing_errors'])
        
        if total_operations > 0:
            return (total_errors / total_operations) * 100
        return 0
    
    def calculate_success_rate(self):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        total_chunks = self.stats['successful_chunks'] + self.stats['failed_chunks']
        
        if total_chunks > 0:
            return (self.stats['successful_chunks'] / total_chunks) * 100
        return 0
    
    def print_session_summary(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        if not self.stats['session_start']:
            return
        
        session_duration = (datetime.now() - self.stats['session_start']).total_seconds()
        
        print(f"\n{'üõ°Ô∏è' * 70}")
        print("   STABLE FASTWHISPER SESSION SUMMARY")
        print(f"{'üõ°Ô∏è' * 70}")
        print(f"‚è∞ Session duration: {session_duration/60:.1f} minutes")
        print(f"üì§ Chunks sent: {self.stats['chunks_sent']}")
        print(f"‚úÖ Successful chunks: {self.stats['successful_chunks']}")
        print(f"‚ùå Failed chunks: {self.stats['failed_chunks']}")
        print(f"üì• Results received: {self.stats['results_received']}")
        print(f"üéµ Total audio sent: {self.stats['total_audio_sent']:.1f} seconds")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        success_rate = self.calculate_success_rate()
        error_rate = self.calculate_error_rate()
        
        print(f"\nüìà PERFORMANCE ANALYSIS:")
        print(f"   Success rate: {success_rate:.1f}%")
        print(f"   Error rate: {error_rate:.1f}%")
        
        if self.stats['average_chunk_size'] > 0:
            print(f"   Average chunk size: {self.stats['average_chunk_size']:.0f} bytes")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
        total_errors = (self.stats['connection_errors'] + 
                       self.stats['audio_errors'] + 
                       self.stats['processing_errors'])
        
        if total_errors > 0:
            print(f"\n‚ùå ERROR BREAKDOWN:")
            print(f"   Connection errors: {self.stats['connection_errors']}")
            print(f"   Audio errors: {self.stats['audio_errors']}")
            print(f"   Processing errors: {self.stats['processing_errors']}")
            print(f"   Total errors: {total_errors}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.results_history:
            print(f"\nüìù LAST {min(5, len(self.results_history))} RESULTS:")
            for result in self.results_history[-5:]:
                timestamp = datetime.fromisoformat(result['timestamp']).strftime('%H:%M:%S')
                print(f"   {timestamp}: \"{result['text']}\"")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° RECOMMENDATIONS:")
        if success_rate < 90:
            print("   ‚Ä¢ Consider checking network connection stability")
            print("   ‚Ä¢ Try using a different audio device")
            print("   ‚Ä¢ Ensure sufficient system resources")
        
        if error_rate > 5:
            print("   ‚Ä¢ High error rate detected - check system performance")
            print("   ‚Ä¢ Consider reducing chunk rate or increasing buffer size")
        
        if self.stats['audio_errors'] > 10:
            print("   ‚Ä¢ Audio errors detected - check microphone and drivers")
        
        print(f"{'üõ°Ô∏è' * 70}")
    
    async def run(self, device_index=None):
        """–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ
            logger.info("üîß Setting up STABLE audio stream...")
            if not self.setup_audio_stream(device_index):
                logger.error("‚ùå Failed to set up audio stream")
                return False
            
            # –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏
            self.stream.start()
            self.is_recording = True
            logger.info("üéôÔ∏è STABLE microphone recording started")
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            logger.info("üîó Establishing STABLE connection...")
            if not await self.connect_to_server():
                logger.error("‚ùå Failed to connect to FastWhisper server")
                return False
            
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            tasks = []
            tasks.append(asyncio.create_task(self.audio_sender()))
            tasks.append(asyncio.create_task(self.result_receiver()))
            tasks.append(asyncio.create_task(self.connection_monitor()))
            tasks.append(asyncio.create_task(self.stats_reporter()))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("\n" + "üõ°Ô∏è" * 90)
            print("üõ°Ô∏è STABLE FASTWHISPER REAL-TIME ASR CLIENT üõ°Ô∏è")
            print("üõ°Ô∏è" * 90)
            print("üéôÔ∏è Speak into the microphone!")
            print("üõ°Ô∏è STABILITY-FIRST mode - optimized for reliability")
            print("üì° Audio chunks: 250ms (stable transmission)")
            print("üîß Enhanced error handling and recovery")
            print("üìä Comprehensive statistics and diagnostics")
            print("ü¶∑ Cody Dental Assistant commands supported")
            print("üíæ Detailed session logging")
            print("üõë Press Ctrl+C to stop gracefully")
            print("üõ°Ô∏è" * 90 + "\n")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
            except Exception as e:
                logger.error(f"‚ùå Task execution error: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error in run(): {e}")
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ Starting STABLE cleanup...")
        
        self.should_run = False
        self.is_recording = False
        self.is_connected = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        if hasattr(self, 'stream'):
            try:
                if self.stream.active:
                    self.stream.stop()
                self.stream.close()
                logger.info("üéôÔ∏è Audio stream stopped and closed")
            except Exception as e:
                logger.error(f"Audio cleanup error: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ –æ—á–µ—Ä–µ–¥–∏
        try:
            while not self.audio_queue.empty():
                try:
                    self.audio_queue.get_nowait()
                except queue.Empty:
                    break
            logger.info("üóÉÔ∏è Audio queue cleared")
        except Exception as e:
            logger.error(f"Queue cleanup error: {e}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        if self.websocket:
            try:
                if not self.websocket.closed:
                    await asyncio.wait_for(self.websocket.close(), timeout=3.0)
                logger.info("üîó WebSocket closed")
            except Exception as e:
                logger.error(f"WebSocket close error: {e}")
        
        # –°–≤–æ–¥–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.print_session_summary()
        self.save_session_log()
        
        logger.info("‚úÖ STABLE cleanup completed")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≤—ã–±–æ—Ä–∞"""
    try:
        import sounddevice as sd
    except ImportError:
        print("‚ùå sounddevice not installed.")
        print("üì¶ Install with: pip install sounddevice")
        return
    
    print("üõ°Ô∏è STABLE FASTWHISPER REAL-TIME ASR CLIENT")
    print("=" * 70)
    print("üéØ Optimized for STABILITY and RELIABILITY")
    print("üîß Enhanced error handling and recovery")
    print("üìä Comprehensive diagnostics")
    print("=" * 70)
    
    # –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
    print(f"\nüåê Server configuration:")
    server_choice = input("Enter server address (or Enter for default AWS): ").strip()
    if server_choice:
        if not server_choice.startswith(('ws://', 'wss://')):
            server_uri = f"ws://{server_choice}:8765"
        else:
            server_uri = server_choice
    else:
        server_uri = "ws://3.84.215.173:8765"
    
    client = StableFastWhisperClient(server_uri)
    
    # –í—ã–±–æ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devices = client.list_audio_devices()
    if not devices:
        print("‚ùå No audio devices found")
        return
    
    print(f"üì± Select audio device:")
    print("‚úÖ = Compatible device")
    print("‚ö†Ô∏è = May have compatibility issues")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    compatible_devices = []
    for i, device in enumerate(devices):
        if device['max_input_channels'] > 0 and client.is_device_compatible(device):
            compatible_devices.append(i)
    
    if compatible_devices:
        print(f"üéØ Recommended compatible devices: {', '.join(map(str, compatible_devices))}")
    
    device_choice = input(f"Enter device number (0-{len(devices)-1}) or Enter for default: ").strip()
    
    try:
        device_index = int(device_choice) if device_choice.isdigit() else None
        if device_index is not None and (device_index < 0 or device_index >= len(devices)):
            print(f"‚ùå Invalid device number. Using default device.")
            device_index = None
    except ValueError:
        device_index = None
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print(f"\nüéØ STABLE Configuration:")
    print(f"   üåê Server: {server_uri}")
    print(f"   üé§ Device: {device_index if device_index is not None else 'default'}")
    print(f"   üõ°Ô∏è Mode: STABILITY-FIRST")
    print(f"   üì° Chunk size: {client.sample_rate}Hz, {client.chunk_duration*1000:.0f}ms")
    print(f"   üîß Buffer size: {client.audio_queue.maxsize} chunks")
    print(f"   ü¶∑ Dental Assistant: INTEGRATED")
    print(f"   üìä Diagnostics: ENABLED")
    
    confirm = input(f"\n‚ñ∂Ô∏è Start STABLE recording? [Y/n]: ").strip().lower()
    if confirm and confirm not in ['y', 'yes', '']:
        print("‚ùå Canceled by user")
        return
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        asyncio.run(client.run(device_index))
    except KeyboardInterrupt:
        print("\n\nüëã STABLE session stopped gracefully")
    except Exception as e:
        print(f"\n‚ùå Critical error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()