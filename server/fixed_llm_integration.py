#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è LLM —Å –õ–ò–ë–ï–†–ê–õ–¨–ù–û–ô –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–≥–¥–∞ LLM –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ASR –æ—à–∏–±–æ–∫
"""

import logging
import json
import asyncio
import re
from datetime import datetime
from typing import Dict, Optional

# –ò–º–ø–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
try:
    from enhanced_periodontal_llm import (
        initialize_enhanced_processor,
        process_periodontal_transcription,
        get_processor_stats,
        enhanced_llm_processor
    )
    ENHANCED_LLM_AVAILABLE = True
    logging.info("ü§ñ Enhanced LLM Periodontal Processor available")
except ImportError as e:
    ENHANCED_LLM_AVAILABLE = False
    logging.warning(f"‚ö†Ô∏è Enhanced LLM Processor not available: {e}")

logger = logging.getLogger(__name__)

class FixedLLMPeriodontalIntegration:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—á–µ–Ω—å –ª–∏–±–µ—Ä–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, openai_api_key: str = None):
        self.enabled = False
        self.openai_api_key = openai_api_key
        self.session_stats = {
            'llm_commands_processed': 0,
            'llm_successful_commands': 0,
            'llm_corrections_made': 0,
            'llm_validation_passed': 0,
            'llm_average_confidence': 0.0,
            'asr_errors_fixed': 0,
            'liberal_detections': 0  # –ù–û–í–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        }
        
        if ENHANCED_LLM_AVAILABLE and openai_api_key:
            self.initialize()
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        try:
            if initialize_enhanced_processor(self.openai_api_key):
                self.enabled = True
                logger.info("ü§ñ FIXED LLM Periodontal Integration initialized")
                return True
            else:
                logger.error("‚ùå Failed to initialize LLM processor")
                return False
        except Exception as e:
            logger.error(f"‚ùå LLM integration initialization error: {e}")
            return False
    
    async def process_transcription(self, text: str, confidence: float = 0.0, patient_id: str = None) -> Dict:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –æ—á–µ–Ω—å –ª–∏–±–µ—Ä–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π
        """
        if not self.enabled:
            return {
                "success": False,
                "error": "llm_not_available",
                "message": "Enhanced LLM Processor not available"
            }
        
        try:
            self.session_stats['llm_commands_processed'] += 1
            
            logger.info(f"ü§ñ LLM Processing: '{text}' (ASR confidence: {confidence:.3f})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ LLM
            result = await process_periodontal_transcription(text, patient_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result.get("success"):
                self.session_stats['llm_successful_commands'] += 1
                self.session_stats['llm_validation_passed'] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                confidence_value = result.get("confidence", 0.0)
                if self.session_stats['llm_successful_commands'] > 0:
                    alpha = 0.1
                    self.session_stats['llm_average_confidence'] = (
                        alpha * confidence_value + 
                        (1 - alpha) * self.session_stats['llm_average_confidence']
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                original = result.get("original_text", "").lower()
                corrected = result.get("corrected_text", "").lower()
                if original != corrected:
                    self.session_stats['asr_errors_fixed'] += 1
                    logger.info(f"üîß ASR FIXED: '{original}' ‚Üí '{corrected}'")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
                result['session_stats'] = self.session_stats.copy()
                result['asr_confidence'] = confidence
                result['system'] = 'fixed_llm_periodontal'
                
                logger.info(f"ü§ñ LLM SUCCESS: {result.get('measurement_type', 'unknown')} "
                           f"for Tooth {result.get('tooth_number')} "
                           f"(LLM conf: {confidence_value:.3f}, "
                           f"ASR conf: {confidence:.3f})")
            else:
                logger.warning(f"ü§ñ LLM FAILED to process: '{text}' - {result.get('message', 'Unknown error')}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå LLM processing error: {e}")
            return {
                "success": False,
                "error": "llm_processing_error",
                "message": f"Error processing LLM command: {str(e)}",
                "confidence": 0.0
            }
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ASR –ø—Ä–æ–º–ø—Ç–∞ –≤ FastWhisper
    def get_dental_asr_prompt():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è FastWhisper ASR
        """
        return """
        Dental examination recording. Common terms: 
        probing depth, bleeding on probing, suppuration, mobility grade, furcation class, 
        gingival margin, missing teeth, tooth number, buccal surface, lingual surface, 
        distal, mesial, millimeter, grade 1 2 3, class 1 2 3, 
        teeth numbers 1 through 32, one two three four five six seven eight nine ten.
        """

        # –§–£–ù–ö–¶–ò–Ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ ASR
    def enhance_asr_with_dental_prompt(asr_model, audio_data):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç dental –ø—Ä–æ–º–ø—Ç –≤ ASR —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        """
        try:
            dental_prompt = get_dental_asr_prompt()
            
            segments, info = asr_model.transcribe(
                audio_data,
                language="en",
                condition_on_previous_text=False,
                temperature=0.0,
                vad_filter=False,
                beam_size=1,
                best_of=1,
                without_timestamps=True,
                word_timestamps=False,
                initial_prompt=dental_prompt,  # –î–û–ë–ê–í–õ–Ø–ï–ú DENTAL –ü–†–û–ú–ü–¢
                suppress_blank=True,
                suppress_tokens=[-1],
                log_prob_threshold=-1.0,
                no_speech_threshold=0.6,
                compression_ratio_threshold=2.4,
            )
            
            return segments, info
            
        except Exception as e:
            logger.error(f"Error in enhanced ASR: {e}")
            # Fallback –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞
            return asr_model.transcribe(audio_data, language="en")
        
    
    def is_periodontal_command_liberal(self, text: str) -> bool:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ß–ï–ù–¨ –õ–ò–ë–ï–†–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ periodontal –∫–æ–º–∞–Ω–¥ —Å –û–¢–õ–ê–î–ö–û–ô
        """
        if not self.enabled:
            logger.warning(f"üö® LLM not enabled for liberal detection: '{text}'")
            return False
        
        text_lower = text.lower()
        
        # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–∫–ª—é—á–∞—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ASR –æ—à–∏–±–∫–∏
        liberal_keywords = [
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            'tooth', 'teeth', 'bleeding', 'probing', 'depth', 'mobility', 'furcation', 
            'plaque', 'pocket', 'gingival', 'missing', 'suppuration', 'recession',
            'buccal', 'lingual', 'surface', 'distal', 'mesial', 'grade', 'class',
            
            # –ß–∞—Å—Ç—ã–µ ASR –æ—à–∏–±–∫–∏ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
            'rubbing', 'robin', 'buckle', 'wingle', 'lingle', 'lingwal', 'teath', 
            'suppration', 'separation', 'furkat', 'cache', 'mobil', 'probin', 
            'bleedin', 'gingi', 'tool', 'two', 'tree', 'for', 'ate', 'sick', 'sex',
            'occal', 'this', 'that', 'too', 'to',  # –î–û–ë–ê–í–õ–ï–ù–û: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ASR –æ—à–∏–±–∫–∏
            'propping', 'proving', 'poking', 'booking', 'looking', 'cooking',
            'facial', 'special', 'racial', 'crucial', 'social',
            'dental', 'mental', 'rental', 'central',
            'mobile', 'motile', 'hostile', 'fertile',
            'present', 'pleasant', 'resident', 'student',
            
            # –ß–∏—Å–ª–æ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–∞—Å—Ç–æ –ø—É—Ç–∞—é—Ç—Å—è)
            'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
            'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 
            'seventeen', 'eighteen', 'nineteen', 'twenty', 'thirty', 'thirty-two'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –õ–Æ–ë–û–ì–û –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        has_keyword = any(keyword in text_lower for keyword in liberal_keywords)
        found_keywords = [kw for kw in liberal_keywords if kw in text_lower]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        has_numbers = bool(re.search(r'\d+', text_lower))
        found_numbers = re.findall(r'\d+', text_lower)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (dental –∫–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω–æ –Ω–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ)
        reasonable_length = len(text.split()) >= 2
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –±–æ–ª–µ–µ —É–º–Ω—ã–µ
        exclusions = [
            'hello', 'hi', 'bye', 'goodbye', 'thank you', 'thanks',
            'weather', 'time', 'date', 'calendar', 'schedule',
            'music', 'play', 'stop', 'pause', 'volume',
            'call', 'phone', 'email', 'message', 'text'
        ]
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–õ–ù–´–ï —Ñ—Ä–∞–∑—ã, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        is_excluded = any(excl in text_lower for excl in exclusions if len(excl) > 3)
        
        # –û–°–û–ë–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è "too" - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï dental –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if 'too' in text_lower and has_keyword and ('missing' in text_lower or 'tooth' in text_lower):
            is_excluded = False  # –ù–ï –∏—Å–∫–ª—é—á–∞–µ–º dental –∫–æ–º–∞–Ω–¥—ã —Å "too"
        
        found_exclusions = [excl for excl in exclusions if excl in text_lower and len(excl) > 3]
        
        # –õ–ò–ë–ï–†–ê–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º LLM –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ dental –∫–æ–º–∞–Ω–¥—ã
        result = (has_keyword or has_numbers) and reasonable_length and not is_excluded
        
        # –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê
        logger.info(f"üîç LIBERAL DETECTION DEBUG for: '{text}'")
        logger.info(f"   ‚úÖ Keywords found: {has_keyword} - {found_keywords}")
        logger.info(f"   üî¢ Numbers found: {has_numbers} - {found_numbers}")
        logger.info(f"   üìè Reasonable length: {reasonable_length} ({len(text.split())} words)")
        logger.info(f"   ‚ùå Excluded: {is_excluded} - {found_exclusions}")
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–ª—è "missing this" –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if 'missing' in text_lower and ('this' in text_lower or 'too' in text_lower or 'that' in text_lower):
            result = True  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–ª—è missing –∫–æ–º–∞–Ω–¥
            logger.info(f"   üéØ SPECIAL CASE: Missing command with 'this/too/that' - FORCED ACTIVATION")
        
        logger.info(f"   üéØ FINAL DECISION: {result}")
        
        if result:
            self.session_stats['liberal_detections'] += 1
            logger.info(f"üéØ LIBERAL DETECTION ACTIVATED LLM for: '{text}'")
        else:
            logger.warning(f"‚ö†Ô∏è LIBERAL DETECTION REJECTED: '{text}'")
        
        return result
    
    def get_session_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LLM —Å–µ—Å—Å–∏–∏"""
        base_stats = self.session_stats.copy()
        
        if enhanced_llm_processor:
            processor_stats = enhanced_llm_processor.get_stats()
            base_stats.update(processor_stats)
        
        base_stats.update({
            "enabled": self.enabled,
            "llm_available": ENHANCED_LLM_AVAILABLE,
            "openai_configured": bool(self.openai_api_key),
            "detection_mode": "liberal",
            "system_version": "fixed_liberal_llm_periodontal"
        })
        
        return base_stats
    
    def reset_session_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        self.session_stats = {
            'llm_commands_processed': 0,
            'llm_successful_commands': 0,
            'llm_corrections_made': 0,
            'llm_validation_passed': 0,
            'llm_average_confidence': 0.0,
            'asr_errors_fixed': 0,
            'liberal_detections': 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
fixed_llm_integration = None

def initialize_fixed_llm_integration(openai_api_key: str) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    global fixed_llm_integration
    
    if not ENHANCED_LLM_AVAILABLE:
        logger.warning("‚ö†Ô∏è Enhanced LLM not available")
        return False
    
    if not openai_api_key:
        logger.warning("‚ö†Ô∏è OpenAI API key not provided")
        return False
    
    try:
        fixed_llm_integration = FixedLLMPeriodontalIntegration(openai_api_key)
        if fixed_llm_integration.enabled:
            logger.info("ü§ñ FIXED LLM Integration initialized successfully")
            return True
        else:
            logger.error("‚ùå FIXED LLM Integration failed to initialize")
            return False
    except Exception as e:
        logger.error(f"‚ùå FIXED LLM Integration initialization error: {e}")
        return False

async def process_transcription_with_fixed_llm(text: str, confidence: float = 0.0, patient_id: str = None) -> Dict:
    """
    –ö–≠–®–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    """
    if not fixed_llm_integration or not fixed_llm_integration.enabled:
        return {
            "success": False,
            "error": "llm_not_initialized",
            "message": "FIXED LLM Integration not initialized"
        }
    
    # –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ê –ü–ï–†–í–´–ú –î–ï–õ–û–ú
    try:
        from llm_cache import llm_cache
        cached_result = llm_cache.get(text)
        if cached_result:
            return cached_result
    except ImportError:
        pass  # –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ LLM
    result = await fixed_llm_integration.process_transcription(text, confidence, patient_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    try:
        from llm_cache import llm_cache
        llm_cache.put(text, result)
    except ImportError:
        pass
    
    return result

def is_periodontal_command_fixed_llm(text: str) -> bool:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø LLM-enhanced –ø—Ä–æ–≤–µ—Ä–∫–∞ periodontal –∫–æ–º–∞–Ω–¥ (–õ–ò–ë–ï–†–ê–õ–¨–ù–ê–Ø)
    """
    if fixed_llm_integration and fixed_llm_integration.enabled:
        return fixed_llm_integration.is_periodontal_command_liberal(text)
    return False

def get_fixed_llm_stats() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô LLM —Å–∏—Å—Ç–µ–º—ã"""
    if fixed_llm_integration:
        return fixed_llm_integration.get_session_stats()
    else:
        return {
            "enabled": False,
            "llm_available": ENHANCED_LLM_AVAILABLE,
            "system_version": "not_initialized"
        }


# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å enhanced_server_with_periodontal.py

class FixedLLMProcessor:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å LLM –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –ª–∏–±–µ—Ä–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π
    """
    
    def __init__(self, base_processor, openai_api_key: str = None):
        self.base_processor = base_processor
        self.llm_integration = None
        
        if openai_api_key:
            self.llm_integration = FixedLLMPeriodontalIntegration(openai_api_key)
    
    async def process_with_fixed_llm_periodontal(self, client_id: str, text: str, confidence: float, duration: float):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–ò–û–†–ò–¢–ï–¢ 1: Enhanced LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –û–¢–õ–ê–î–ö–û–ô
        """
        try:
            logger.info(f"üîÑ PROCESSING START for {client_id}: '{text}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM —Å–∏—Å—Ç–µ–º—ã
            if not self.llm_integration or not self.llm_integration.enabled:
                logger.warning("ü§ñ LLM not available, falling back to standard processing")
                return await self.base_processor.process_with_enhanced_systems(client_id, text, confidence, duration)
            
            logger.info(f"ü§ñ LLM integration available and enabled")
            
            # –õ–ò–ë–ï–†–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ periodontal –∫–æ–º–∞–Ω–¥—É
            is_periodontal = self.llm_integration.is_periodontal_command_liberal(text)
            logger.info(f"üîç Liberal detection result: {is_periodontal}")
            
            if is_periodontal:
                logger.info(f"ü§ñ LIBERAL DETECTION triggered LLM for: '{text}'")
                
                llm_result = await self.llm_integration.process_transcription(text, confidence)
                
                if llm_result.get("success"):
                    # LLM —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∫–æ–º–∞–Ω–¥—É
                    logger.info(f"ü§ñ LLM SUCCESS: {llm_result['message']}")
                    await self.broadcast_fixed_llm_periodontal_update(client_id, llm_result)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
                    if hasattr(self.base_processor, 'stats'):
                        self.base_processor.stats['successful_commands'] += 1
                        self.base_processor.stats['commands_processed'] += 1
                        
                        # LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        self.base_processor.stats['llm_commands_processed'] = (
                            self.base_processor.stats.get('llm_commands_processed', 0) + 1
                        )
                        self.base_processor.stats['llm_successful_commands'] = (
                            self.base_processor.stats.get('llm_successful_commands', 0) + 1
                        )
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ASR –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                        original = llm_result.get("original_text", "").lower()
                        corrected = llm_result.get("corrected_text", "").lower()
                        if original != corrected:
                            self.base_processor.stats['llm_asr_errors_fixed'] = (
                                self.base_processor.stats.get('llm_asr_errors_fixed', 0) + 1
                            )
                    
                    return
                else:
                    # LLM –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –ª–∏–±–µ—Ä–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
                    logger.warning(f"ü§ñ LLM FAILED even with liberal detection: {llm_result.get('message', 'Unknown error')}")
            else:
                # –î–∞–∂–µ –ª–∏–±–µ—Ä–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ LLM
                logger.warning(f"ü§ñ LIBERAL DETECTION did not trigger for: '{text}'")
            
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ enhanced_server
            logger.info(f"üîÑ Falling back to standard enhanced processing for: '{text}'")
            await self.base_processor.process_with_enhanced_systems(client_id, text, confidence, duration)
                
        except Exception as e:
            logger.error(f"‚ùå FIXED LLM processing error for {client_id}: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await self.base_processor.process_with_enhanced_systems(client_id, text, confidence, duration)
    
    async def broadcast_fixed_llm_periodontal_update(self, client_id: str, llm_result: Dict):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ LLM periodontal –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not hasattr(self.base_processor, 'web_clients'):
            return
            
        web_clients = getattr(self.base_processor, 'web_clients', set())
        if not web_clients:
            return
        
        # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
        message = json.dumps({
            "type": "periodontal_update",
            "client_id": client_id,
            "success": llm_result["success"],
            "tooth_number": llm_result.get("tooth_number"),
            "measurement_type": llm_result.get("measurement_type"),
            "surface": llm_result.get("surface"),
            "position": llm_result.get("position"),
            "values": llm_result.get("values"),
            "measurements": llm_result.get("measurements"),
            "confidence": llm_result.get("confidence", 0.0),
            "asr_confidence": llm_result.get("asr_confidence", 0.0),
            "message": llm_result["message"],
            "original_text": llm_result.get("original_text", ""),
            "corrected_text": llm_result.get("corrected_text", ""),
            "timestamp": llm_result.get("timestamp", datetime.now().isoformat()),
            "session_stats": llm_result.get("session_stats", {}),
            "system": "fixed_liberal_llm_periodontal"
        })
        
        disconnected = set()
        for client in web_clients.copy():
            try:
                await client.send(message)
            except Exception as e:
                logger.error(f"Error sending FIXED LLM periodontal update to web client: {e}")
                disconnected.add(client)
        
        for client in disconnected:
            web_clients.discard(client)


def enhance_processor_with_fixed_llm(base_processor, openai_api_key: str = None):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è LLM –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É
    """
    if not ENHANCED_LLM_AVAILABLE or not openai_api_key:
        logger.warning("‚ö†Ô∏è Cannot enhance processor with FIXED LLM - requirements not met")
        return base_processor
    
    # –°–æ–∑–¥–∞–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô LLM —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    fixed_processor = FixedLLMProcessor(base_processor, openai_api_key)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ LLM –≤–µ—Ä—Å–∏—é
    if hasattr(base_processor, 'process_with_enhanced_systems'):
        base_processor.process_with_enhanced_systems = fixed_processor.process_with_fixed_llm_periodontal
    
    # –î–æ–±–∞–≤–ª—è–µ–º LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if hasattr(base_processor, 'stats'):
        base_processor.stats.update({
            'llm_commands_processed': 0,
            'llm_successful_commands': 0,
            'llm_asr_errors_fixed': 0,
            'llm_average_confidence': 0.0,
            'llm_liberal_detections': 0,
            'llm_enabled': True,
            'llm_detection_mode': 'liberal'
        })
    
    logger.info("ü§ñ Processor enhanced with FIXED LIBERAL LLM Periodontal functionality")
    return base_processor

def add_fixed_llm_stats_to_server_stats(base_stats: Dict) -> Dict:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    if fixed_llm_integration and fixed_llm_integration.enabled:
        llm_stats = fixed_llm_integration.get_session_stats()
        base_stats.update({
            'llm_periodontal_available': True,
            'llm_commands_processed': llm_stats.get('llm_commands_processed', 0),
            'llm_successful_commands': llm_stats.get('llm_successful_commands', 0),
            'llm_asr_errors_fixed': llm_stats.get('asr_errors_fixed', 0),
            'llm_average_confidence': llm_stats.get('llm_average_confidence', 0.0),
            'llm_liberal_detections': llm_stats.get('liberal_detections', 0),
            'llm_model': llm_stats.get('model', 'unknown'),
            'llm_detection_mode': 'liberal',
            'llm_validation_enabled': True
        })
    else:
        base_stats.update({
            'llm_periodontal_available': False,
            'llm_enabled': False
        })
    
    return base_stats


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    import os
    
    async def test_fixed_llm_integration():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        print("ü§ñ Testing FIXED LLM Integration with Liberal Detection")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ùå OPENAI_API_KEY not found")
            return
        
        success = initialize_fixed_llm_integration(api_key)
        if not success:
            print("‚ùå Failed to initialize FIXED LLM integration")
            return
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        test_commands = [
            ("Probing depth on tooth number two, wingle surface 231.", True),
            ("Probing depth on tooth number 2, buckle surface 312.", True),
            ("Bleeding on probing tooth 2, buccal distal.", True),
            ("Missing this one.", True),
            ("For Cache in class 2 on tooth 2", True),
            ("Tooth Tool has mobility grade 2", True),
            ("Separation present on tooth 8 lingual distal.", True),
            ("Bleeding on probing tooth 3, lingual distal.", True),
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
            ("hello how are you", False),
            ("what time is it", False)
        ]
        
        for cmd, should_detect in test_commands:
            print(f"\nüìù Testing: '{cmd}'")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–ò–ë–ï–†–ê–õ–¨–ù–û–ô –¥–µ—Ç–µ–∫—Ü–∏–∏
            is_detected = is_periodontal_command_fixed_llm(cmd)
            detection_status = "‚úÖ DETECTED" if is_detected else "‚ùå NOT DETECTED"
            expected_status = "‚úÖ CORRECT" if is_detected == should_detect else "‚ùå WRONG"
            
            print(f"   üîç Liberal detection: {detection_status} {expected_status}")
            
            if is_detected:
                result = await process_transcription_with_fixed_llm(cmd, 0.8, "test_patient")
                
                if result["success"]:
                    print(f"   ü§ñ LLM SUCCESS: {result['message']}")
                    print(f"   üîß Original: '{result.get('original_text', 'N/A')}'")
                    print(f"   üîß Corrected: '{result.get('corrected_text', 'N/A')}'")
                    print(f"   ü¶∑ Tooth: {result.get('tooth_number')}")
                    print(f"   üìã Type: {result.get('measurement_type')}")
                    print(f"   üìä Values: {result.get('values')}")
                else:
                    print(f"   ‚ùå LLM FAILED: {result['message']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_fixed_llm_stats()
        print(f"\nüìä FIXED LLM Stats:")
        for key, value in stats.items():
            print(f"   {key}: {value}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_fixed_llm_integration())