#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ú–ì–ù–û–í–ï–ù–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
"""

import asyncio
import time
import logging
from typing import Optional
import json
import numpy as np

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
from instant_command_system import (
    InstantCommandProcessor,
    CommandCompleteness,
    integrate_instant_command_system
)

logger = logging.getLogger(__name__)

class EnhancedProcessorWithInstantCommands:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    
    def __init__(self, base_processor, web_clients_ref):
        self.base_processor = base_processor
        self.web_clients = web_clients_ref
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.instant_processor = InstantCommandProcessor(web_clients_ref)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.instant_stats = {
            'instant_commands_executed': 0,
            'partial_commands_detected': 0,
            'average_instant_response_time': 0.0,
            'total_instant_response_time': 0.0
        }
        
        logger.info("üöÄ Enhanced processor with instant commands initialized")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏-—Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    @property
    def asr(self):
        """–ü—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ ASR"""
        return self.base_processor.asr
    
    @property
    def vad(self):
        """–ü—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ VAD"""
        return self.base_processor.vad
    
    @property
    def segmentation_processor(self):
        """–ü—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ segmentation_processor"""
        return getattr(self.base_processor, 'segmentation_processor', None)
    
    @property
    def stats(self):
        """–ü—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º instant stats"""
        base_stats = getattr(self.base_processor, 'stats', {})
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        combined_stats = base_stats.copy()
        combined_stats.update(self.instant_stats)
        combined_stats['instant_system_enabled'] = True
        return combined_stats
    
    def process_audio_chunk(self, client_id: str, audio_chunk) -> Optional[str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        """
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        transcription_result = self.base_processor.process_audio_chunk(client_id, audio_chunk)
        
        if transcription_result and isinstance(transcription_result, str) and transcription_result.strip():
            # ‚úÖ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –í–´–ü–û–õ–ù–ï–ù–ò–ï
            try:
                print(f"üîç INSTANT CHECK: '{transcription_result}'")
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
                completeness, command_data = self.instant_processor.analyzer.analyze_command_completeness(
                    transcription_result, client_id
                )
                
                if completeness == CommandCompleteness.COMPLETE:
                    print(f"üöÄ INSTANT EXECUTION NOW: '{transcription_result}'")
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    self._mark_command_as_processed_sync(client_id, transcription_result)
                    
                    # –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        task = loop.create_task(
                            self.instant_processor._send_instant_result(client_id, command_data)
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                        self.instant_stats['instant_commands_executed'] += 1
                        

                        
                        print(f"‚ö° INSTANT RESULT SENT in {time.time():.3f}s")
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                        return transcription_result
                        
                elif completeness == CommandCompleteness.INCOMPLETE:
                    print(f"‚è≥ WAITING FOR COMPLETION: '{transcription_result}'")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                    if hasattr(self, '_send_partial_feedback_sync'):
                        self._send_partial_feedback_sync(client_id, transcription_result)
                    
            except Exception as e:
                print(f"‚ùå INSTANT CHECK ERROR: {e}")
                import traceback
                traceback.print_exc()
        
        return transcription_result
    
    def process_audio_chunk_with_predictive(self, client_id: str, audio_chunk: np.ndarray) -> Optional[str]:
        """PREDICTIVE –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º instant commands –ù–ê –ö–ê–ñ–î–û–ú –ß–ê–ù–ö–ï"""
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        result = self.base_processor.process_audio_chunk(client_id, audio_chunk)
        
        
        # –ù–û–í–û–ï: Predictive check –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if hasattr(self.base_processor, 'segmentation_processor'):
            segmentation_processor = self.base_processor.segmentation_processor
            
            if hasattr(segmentation_processor, 'client_buffers'):
                buffer = segmentation_processor.client_buffers.get(client_id)
                
                if buffer and hasattr(buffer, 'audio_buffer') and len(buffer.audio_buffer) > 32000:  # 2+ —Å–µ–∫—É–Ω–¥—ã
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                    try:
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        quick_audio = buffer.audio_buffer[-32000:]
                        #quick_text, _, _ = self.base_processor.asr.transcribe(quick_audio)
                        qick_text, _, _ = self.base_processor.asr.transcribe_fast_preview(quick_audio)
                        if quick_text and len(quick_text.split()) >= 6:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤
                            
                            print(f"üîç PREDICTIVE CHECK: '{quick_text}'")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º instant completeness
                            completeness, command_data = self.instant_processor.analyzer.analyze_command_completeness(quick_text, client_id)
                            
                            if completeness == CommandCompleteness.COMPLETE:
                                print(f"üöÄ PREDICTIVE INSTANT EXECUTION: '{quick_text}'")
                                
                                # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                                asyncio.create_task(
                                    self.instant_processor._send_instant_result(client_id, command_data)
                                )
                                
                                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                                self._mark_command_as_processed_sync(client_id, quick_text)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                self.instant_stats['instant_commands_executed'] += 1
                                
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ predictive –ø—Ä–æ–≤–µ—Ä–∫–∏
                        print(f"‚ö†Ô∏è Predictive error: {e}")
                        pass
    
    
    
    def _mark_command_as_processed_sync(self, client_id: str, text: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if not hasattr(self, '_processed_commands'):
            self._processed_commands = {}
        
        command_key = f"{client_id}_{hash(text)}"
        self._processed_commands[command_key] = {
            'text': text,
            'timestamp': time.time(),
            'processed_instantly': True
        }
        print(f"üîí COMMAND LOCKED: '{text}' from {client_id}")

    def _send_partial_feedback_sync(self, client_id: str, partial_text: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if self.web_clients:
            feedback_message = {
                "type": "partial_command_feedback",
                "client_id": client_id,
                "partial_text": partial_text,
                "status": "waiting_for_completion",
                "timestamp": time.time()
            }
            
            message_json = json.dumps(feedback_message)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ loop
            loop = asyncio.get_event_loop()
            if loop.is_running():
                for client in list(self.web_clients):
                    try:
                        loop.create_task(client.send(message_json))
                    except:
                        pass
    
    def is_command_already_processed(self, client_id: str, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ"""
        if not hasattr(self, '_processed_commands'):
            return False
        
        command_key = f"{client_id}_{hash(text)}"
        return command_key in self._processed_commands
    
    async def process_with_enhanced_systems(self, client_id: str, text: str, confidence: float, 
                                          duration: float, recording_path: str = None, 
                                          speech_audio = None):
        """
        –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if hasattr(self, 'is_command_already_processed') and self.is_command_already_processed(client_id, text):
            print(f"‚ö° SKIPPING - Command already processed instantly: '{text}'")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        if self.is_command_already_processed(client_id, text):
            print(f"‚ö° COMMAND ALREADY PROCESSED INSTANTLY - SKIPPING ALL SYSTEMS: '{text}'")
            print(f"üö´ Enhanced systems bypassed for instant command")
            return
        
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        print(f"üîÑ Processing through enhanced systems: '{text}'")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if hasattr(self.base_processor, 'process_with_enhanced_systems'):
            await self.base_processor.process_with_enhanced_systems(
                client_id, text, confidence, duration, recording_path, speech_audio
            )
    
    def get_instant_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        stats = self.instant_stats.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        stats.update({
            'instant_system_enabled': True,
            'instant_response_threshold_ms': 100,  # –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
            'commands_in_cache': len(getattr(self, '_processed_commands', {})),
            'instant_hit_rate': (
                (stats['instant_commands_executed'] / 
                 max(1, stats['instant_commands_executed'] + stats['partial_commands_detected'])) * 100
            ) if stats['instant_commands_executed'] > 0 else 0
        })
        
        return stats

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–ª–µ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É
    def __getattr__(self, name):
        """–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É"""
        return getattr(self.base_processor, name)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
def create_enhanced_processor_with_instant_commands(base_processor, web_clients_ref):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    
    enhanced_processor = EnhancedProcessorWithInstantCommands(base_processor, web_clients_ref)
    
    logger.info("üöÄ Enhanced processor with instant commands created")
    return enhanced_processor

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ASR –∫–ª–∏–µ–Ω—Ç–æ–≤
async def handle_asr_client_with_instant_commands(websocket, enhanced_processor):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ASR –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    """
    client_addr = websocket.remote_address
    client_id = f"{client_addr[0]}_{client_addr[1]}_{int(time.time())}"
    
    logger.info(f"üé§ ASR –∫–ª–∏–µ–Ω—Ç —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏: {client_id}")
    
    try:
        client_error_count = 0
        max_client_errors = 20
        last_ping_time = time.time()
        chunks_received = 0
        instant_commands_count = 0
        
        async for message in websocket:
            try:
                if isinstance(message, bytes):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                    try:
                        import numpy as np
                        audio_chunk = np.frombuffer(message, dtype=np.int16).astype(np.float32) / 32768.0
                        chunks_received += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                        if np.any(np.isnan(audio_chunk)) or np.any(np.isinf(audio_chunk)):
                            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç {client_id}")
                            client_error_count += 1
                            continue
                        
                        # –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–†–ï–ó –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –° –ú–ì–ù–û–í–ï–ù–ù–´–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò
                        if enhanced_processor:
                            result = enhanced_processor.process_audio_chunk_with_predictive(client_id, audio_chunk)
                            # –î–û–ë–ê–í–ò–¢–¨ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É:
                            if result is not None and result.strip():
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º instant execution –°–ò–ù–•–†–û–ù–ù–û
                                try:
                                    completeness, command_data = enhanced_processor.instant_processor.analyzer.analyze_command_completeness(result, client_id)
                                    if completeness == CommandCompleteness.COMPLETE:
                                        print(f"üöÄ INSTANT EXECUTION TRIGGERED!")
                                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                        asyncio.create_task(
                                            enhanced_processor.instant_processor._send_instant_result(client_id, command_data)
                                        )
                                except Exception as e:
                                    print(f"‚ùå Instant check error: {e}")
            
                            if result and isinstance(result, str) and result.strip():
                                asyncio.create_task(
                                    enhanced_processor.instant_processor.process_instant_command(client_id, result)
                                )
                            if result is not None:
                                if result.strip():
                                    try:
                                        await asyncio.wait_for(websocket.send(result), timeout=2.0)
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                                        instant_stats = enhanced_processor.get_instant_stats()
                                        
                                        print(f"\n{'‚ö°' * 60}")
                                        print(f"   INSTANT COMMAND SYSTEM + FASTWHISPER")
                                        print(f"   üé§ TRANSCRIPTION: '{result.upper()}'")
                                        print(f"   üë§ Client: {client_addr[0]} | üìä Chunks: {chunks_received}")
                                        print(f"   ‚ö° Instant commands: {instant_stats['instant_commands_executed']}")
                                        print(f"   ‚è≥ Partial commands: {instant_stats['partial_commands_detected']}")
                                        print(f"   üéØ Instant hit rate: {instant_stats['instant_hit_rate']:.1f}%")
                                        print(f"   ‚è±Ô∏è Avg instant response: {instant_stats['average_instant_response_time']*1000:.1f}ms")
                                        print(f"   üöÄ Target response: <100ms")
                                        print('‚ö°' * 60 + "\n")
                                        
                                    except asyncio.TimeoutError:
                                        logger.warning(f"‚ö†Ô∏è Timeout sending result to {client_id}")
                                        client_error_count += 1
                                else:
                                    await websocket.send("NO_SPEECH")
                        else:
                            await websocket.send("SERVER_NOT_READY")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –æ—Ç {client_id}: {e}")
                        client_error_count += 1
                        
                elif isinstance(message, str):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (PING, STATS –∏ —Ç.–¥.)
                    current_time = time.time()
                    
                    if message == "PING":
                        await websocket.send("PONG")
                        last_ping_time = current_time
                        
                    elif message == "STATS":
                        if enhanced_processor:
                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                            stats = enhanced_processor.stats.copy()
                            stats['server_uptime'] = current_time - stats.get('server_uptime_start', current_time)
                            stats['instant_system_version'] = 'instant_commands_v1'
                            
                            try:
                                await asyncio.wait_for(websocket.send(json.dumps(stats)), timeout=3.0)
                            except asyncio.TimeoutError:
                                logger.warning(f"‚ö†Ô∏è Timeout sending stats to {client_id}")
                                
                    elif message == "MODEL_INFO":
                        if enhanced_processor:
                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-–¥–æ—Å—Ç—É–ø –∫ ASR
                            model_info = enhanced_processor.asr.get_info()
                            model_info.update({
                                'instant_commands_enabled': True,
                                'instant_response_target_ms': 100,
                                'instant_command_patterns': 7,
                                'enhanced_mode': 'INSTANT_COMMANDS_V1',
                                'command_prediction': True,
                                'real_time_execution': True
                            })
                            
                            try:
                                await asyncio.wait_for(websocket.send(json.dumps(model_info)), timeout=3.0)
                            except asyncio.TimeoutError:
                                logger.warning(f"‚ö†Ô∏è Timeout sending model info to {client_id}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
                if client_error_count > max_client_errors:
                    logger.error(f"‚ùå Too many errors from {client_id}, disconnecting")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Critical error handling message from {client_id}: {e}")
                client_error_count += 1
                
    except Exception as e:
        logger.error(f"‚ùå ASR client error: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        if enhanced_processor and hasattr(enhanced_processor, 'segmentation_processor') and enhanced_processor.segmentation_processor:
            enhanced_processor.segmentation_processor.cleanup_client(client_id)
            logger.debug(f"üóëÔ∏è Cleaned up buffers for {client_id}")
